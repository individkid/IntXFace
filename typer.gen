dofile("typra.src")

function showTyperC()
	local result = ""
	result = result.."#include \"face.h\"\n"
	result = result.."#include \"typer.h\"\n"
	result = result.."#include <stdlib.h>\n"
	result = result.."#include <string.h>\n"
	result = result.."#include <stdio.h>\n"
	result = result..showCallC().."\n"
	result = result.."int main(int argc, char **argv)\n".."{\n"..
	showIndent(1).."if (argc == 4) {\n"..
	showIndent(1).."pipeInit(argv[1],argv[2]);\n"..
	showIndent(1).."struct Struct1 *ptr = 0;\n"..
	showIndent(1).."allocStruct1(&ptr,1);\n"..
	showIndent(1).."readStruct1(ptr,0);\n"..
	showIndent(1).."writeStruct1(ptr,0);\n"..
	showIndent(1).."return 0;}\n"
	result = result..
	showIndent(1).."forkExec(\"typerC\");\n"..
	showIndent(1).."forkExec(\"typerLua\");\n"..
	showIndent(1).."forkExec(\"typerSw\");\n"..
	showIndent(1).."forkExec(\"typerHs\");\n"..
	showIndent(1).."sleepSec(1);\n"
	result = result..
	showIndent(1).."struct Struct1 *exp = 0;\n"..
	showIndent(1).."int size = 4;\n"..
	showIndent(1).."allocStruct1(&exp,size);\n"..
	showIndent(1).."for (int i = 0; i < size; i++) randStruct1(exp+i);\n"..
	showIndent(1).."for (int i = 0; i < size; i++) writeStruct1(exp+i,i);\n"..
	showIndent(1).."struct Struct1 *act = 0;\n"..
	showIndent(1).."allocStruct1(&act,size);\n"..
	showIndent(1).."for (int i = 0; i < size; i++) readStruct1(act+i,i);\n"..
	showIndent(1).."int pass = 0;\n"..
	showIndent(1).."for (int i = 0; i < size; i++) {\n"..
	showIndent(1).."char *str = 0;\n"..
	showIndent(1).."struct Struct1 tmp = {0};\n"..
	showIndent(1).."int len = 0;\n"..
	showIndent(1).."showStruct1(exp+i,&str,&len);\n"..
	showIndent(1).."hideStruct1(&tmp,str);\n"..
	showIndent(1).."free(str);\n"..
	showIndent(1).."pass += compStruct1(&tmp,act+i);\n"..
	showIndent(1).."freeStruct1(&tmp);}\n"
	result = result..
	showIndent(1).."return (pass!=size?-1:0);\n"..
	"}"
	return result
end
function showTyperHs()
	local result = ""
	result = result.."module Main where\n"
	result = result.."--\n"
	result = result.."import Face\n"
	result = result.."import System.Environment\n"
	result = result.."import System.Exit\n"
	result = result.."--\n"
	result = result..showCallHs().."\n"
	result = result.."mainF :: [String] -> IO ()\n"
	result = result.."mainF [a,b,c] = do\n"
	result = result..showIndent(1).."pipeInit a b\n"
	result = result..showIndent(1).."d <- readStruct1 0\n"
	result = result..showIndent(1).."writeStruct1 d 0\n"
	result = result.."mainF _ = undefined\n"
	result = result.."--\n"
	result = result.."main :: IO ()\n"
	result = result.."main = getArgs >>= mainF\n"
	result = result.."--"
	return result
end
function showTyperLua()
	local result = ""
	result = result.."require \"face\"\n"
	result = result.."--\n"
	result = result..showCallLua().."\n"
	result = result.."-- MAIN\n"
	result = result.."if (arg[1] and arg[2] and arg[3]) then\n"
	result = result.."pipeInit(arg[1],arg[2])\n"
	result = result.."tab = readStruct1(0)\n"
	result = result.."writeStruct1(tab,0)\n"
	result = result.."end\n"
	return result
end
function showTyperSw()
	local result = ""
	result = result.."import face\n"
	result = result.."//\n"
	result = result..showCallSw().."\n"
	result = result.."// MAIN\n"
	result = result..showIndent(1).."if (CommandLine.arguments.count == 4) {\n"
	result = result..showIndent(1).."pipeInit(CommandLine.arguments[1],CommandLine.arguments[2])\n"
	result = result..showIndent(1).."let tab = readStruct1(0)\n"
	result = result..showIndent(1).."writeStruct1(tab,0)\n"
	result = result..showIndent(1).."}\n"
	return result
end
if (arg[1] == "typer.h") then
	file = io.open("typer.h", "w")
	file:write(showCallH().."\n")
	file:close()
end
if (arg[1] == "typer.c") then
	file = io.open("typer.c", "w")
	file:write(showTyperC().."\n")
	file:close()
end
if (arg[1] == "typer.hs") then
	file = io.open("typer.hs", "w")
	file:write(showTyperHs().."\n")
	file:close()
end
if (arg[1] == "typer.lua") then
	file = io.open("typer.lua", "w")
	file:write(showTyperLua().."\n")
	file:close()
end
if (arg[1] == "typer.sw") then
	file = io.open("typer.sw", "w")
	file:write(showTyperSw().."\n")
	file:close()
end
