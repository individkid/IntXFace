import AppKit
var moving = false
var resizing = false
var dragging = false
var window:NSWindow!
var view:NSView!
var count = Int(0)
var last = NSPoint(x:0.0,y:0.0)
func getCenter() -> NSPoint
{
	let rect = window.frame
	return NSPoint(x:rect.origin.x+rect.size.width/2.0,y:rect.origin.y+rect.size.height/2.0)
}
func getDistance() -> Float
{
	let center = getCenter()
	let x = Float(center.x)-Float(last.x)
	let y = Float(center.y)-Float(last.y)
	let square = x*x+y*y
	let root = square.squareRoot()
	last = center
	return Float(root)
}
func getRect() -> NSRect
{
	var rect = window.frame
	let size = view.frame
	rect.size = size.size
	return rect
}
func getPoint() -> NSPoint
{
	return NSEvent.mouseLocation
}
func getDrag() -> Bool
{
	let rect = getRect()
	let point = getPoint()
	return !(point.x >= rect.origin.x && point.y >= rect.origin.y && point.x <= rect.origin.x+rect.size.width && point.y <= rect.origin.y+rect.size.height)
}
class getEvent : NSObject, NSWindowDelegate
{
	func windowShouldClose(_ sender: NSWindow) -> Bool
	{
		print("windowShouldClose")
		NSApp.stop(nil)
		return true
	}
	func windowDidResize(_ notification: Notification)
	{
		if (moving) {moving = false}
		if (!resizing) {resizing = true}
		if (dragging) {dragging = false}
		count = count + 1;
	}
}
func handleDelay() async
{
	if (!moving) {moving = true}
	if (resizing) {print("oops1"); resizing = false}
	if (dragging) {print("opps2"); dragging = false}
	while (moving) {
		count = count + 1;
		try! await Task.sleep(nanoseconds:1_000_000)
	}
}
func handleHint(_ hint: String)
{
	if (count > 0) {print("rate \(getDistance()/Float(count))"); count = 0}
	if (moving) {moving = false}
	if (resizing) {resizing = false}
	if (hint == "leftMouseDown") {
		if (dragging) {print("oops3"); dragging = false}
		if (getDrag()) {Task(priority:.medium,operation:{await handleDelay()})}
		else {dragging = true}}
	if (hint == "leftMouseUp") {
		if (dragging) {print("here \(getPoint())"); dragging = false}}
}
func setEvent(_ type:NSEvent.EventTypeMask, _ hint: String)
{
	NSEvent.addLocalMonitorForEvents(matching:type, handler: {(event: NSEvent) in handleHint(hint); return event})
}
// MAIN
	let event = getEvent()
	let rect = NSMakeRect(
		CGFloat(0), CGFloat(0),
		CGFloat(1024), CGFloat(512))
	view = NSView(frame:rect)
	let mask:NSWindow.StyleMask = [.titled,.closable,.miniaturizable,.resizable]
	window = NSWindow(contentRect: rect, styleMask: mask, backing: .buffered, defer: true)
	window.title = "page"
	window.makeKeyAndOrderFront(nil)
	window.contentView = view
	window.delegate = event
	setEvent(.keyDown,"keyDown")
	setEvent(.keyUp,"keyUp")
	setEvent(.leftMouseUp,"leftMouseUp")
	setEvent(.rightMouseUp,"rightMouseUp")
	setEvent(.leftMouseDown,"leftMouseDown")
	setEvent(.rightMouseDown,"rightMouseDown")
	setEvent(.mouseMoved,"mouseMoved")
	setEvent(.scrollWheel,"scrollWheel")
	NSApp.run()
