import AppKit
var text:CATextLayer!
var side:CATextLayer!
var view:NSView!
var window:NSWindow!
func getRect() -> NSRect
{
	let orig = window.frame.origin
	let size = view.frame.size
	let full = NSScreen.main!.visibleFrame.size
	let w = size.width/2.0
	let h = size.height/2.0
	let x = orig.x+w-full.width/2.0
	let y = orig.y+h-full.height/2.0
	return NSMakeRect(x,y,w,h)
}
func getPoint() -> NSPoint
{
	let orig = NSEvent.mouseLocation
	let full = NSScreen.main!.visibleFrame.size
	let x = orig.x-full.width/2.0
	let y = orig.y-full.height/2.0
	return NSMakePoint(x,y)
}
func setFrame()
{
	text.frame = view.frame
}
class getDelegate : NSObject, NSWindowDelegate
{
	func windowShouldClose(_ sender: NSWindow) -> Bool
	{
		NSApp.stop(nil)
		return true
	}
	func windowDidResize(_ notification: Notification)
	{
		// CATransaction.begin()
		// CATransaction.setDisableActions(true)
		setFrame()
		// CATransaction.commit()
	}
	func windowWillMove(_ notification: Notification)
	{
		print("windowWillMove begin \(getPoint()) \(getRect())")
		Task(priority:.medium,operation:{
			while (NSEvent.pressedMouseButtons != 0) {
			try! await Task.sleep(nanoseconds:1_000_000)
			windowDidResize(notification)}
			print("windowWillMove done \(getPoint()) \(getRect())")})
	}
}
class getView : NSView
{
	override func mouseEntered(with event: NSEvent)
	{
		print("mouseEntered \(getPoint()) \(getRect())")
	}
	override func mouseExited(with event: NSEvent)
	{
		print("mouseExited \(getPoint()) \(getRect())")
	}
	override func mouseMoved(with event: NSEvent)
	{
		// print("mouseMoved \(getPoint())")
	}
	override func mouseDown(with event: NSEvent)
	{
		print("mouseDown \(getPoint()) \(getRect())")
	}
	override func mouseUp(with event: NSEvent)
	{
		print("mouseUp \(getPoint()) \(getRect())")
	}
	override func scrollWheel(with event: NSEvent)
	{
		print("scrollWheel \(event.deltaY)")
	}
}
// MAIN
	let rect = NSMakeRect(
		CGFloat(0), CGFloat(0),
		CGFloat(1024), CGFloat(512))
	var lines = 0
	var string = ""
	while (lines < 100) {string = string+"hello ok again \(lines)\n"; lines += 1}

	text = CATextLayer()
	text.string = string
	text.foregroundColor = CGColor.black
	text.backgroundColor = CGColor.white
	text.fontSize = 36.0

	/*
	side = getText()
	side.string = string
	side.foregroundColor = CGColor.black
	side.backgroundColor = CGColor.white
	*/

	/*
	let font = text.font as! NSFont
	let textBounds = getFrame()
    let textContainer = NSTextContainer()
	let layoutManager = NSLayoutManager()

	layoutManager.addTextContainer(textContainer)

	layoutManager.typesetterBehavior = .latestBehavior

	textContainer.containerSize = textBounds.size

	let rangeCharacters = (string as NSString).range(of: string)

	var count = 0
	let rects: NSRectArray = layoutManager.rectArray(forCharacterRange: rangeCharacters,
	withinSelectedCharacterRange: rangeCharacters,
	in: textContainer,
	rectCount: &count)!

	for i in 0...count {
		let rect = NSOffsetRect(rects[i], textBounds.origin.x, textBounds.origin.y)
		print("rect \(rect)")
    }
	*/

	view = getView(frame:rect)
	view.wantsLayer = true
	view.layer!.addSublayer(text)
	let tracking = NSTrackingArea(rect:rect,options:[.mouseMoved,.mouseEnteredAndExited,.inVisibleRect,.activeInKeyWindow],owner:view)
	view.addTrackingArea(tracking)
	setFrame()

	let mask:NSWindow.StyleMask = [.titled,.closable,.miniaturizable,.resizable]
	window = NSWindow(contentRect: rect, styleMask: mask, backing: .buffered, defer: false)
	window.title = "page"
	window.contentView = view
	let delegate = getDelegate()
	window.delegate = delegate
	window.makeKeyAndOrderFront(nil)

	NSApp.setActivationPolicy(NSApplication.ActivationPolicy.accessory)
	NSApp.activate(ignoringOtherApps:true)
	NSApp.run()
