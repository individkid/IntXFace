import AppKit
var text:CATextLayer!
var side:CATextLayer!
var view:NSView!
var window:NSWindow!
func handleHint(_ hint: String)
{
}
class getDelegate : NSObject, NSWindowDelegate
{
	func windowShouldClose(_ sender: NSWindow) -> Bool
	{
		NSApp.stop(nil)
		return true
	}
	func windowDidResize(_ notification: Notification)
	{
		// CATransaction.begin()
		// CATransaction.setDisableActions(true)
		text.frame = view.frame
		// CATransaction.commit()
	}
	func windowWillMove(_ notification: Notification)
	{
		print("windowWillMove \(NSEvent.pressedMouseButtons)")
		Task(priority:.medium,operation:{
			while (NSEvent.pressedMouseButtons != 0) {
			try! await Task.sleep(nanoseconds:1_000_000)
			windowDidResize(notification)}
			print("awake")})
		print("window is moving")
	}
}
class getView : NSView
{
	override func mouseUp(with event: NSEvent)
	{
		print("here \(NSEvent.mouseLocation)")
	}
}
// MAIN
	let rect = NSMakeRect(
		CGFloat(0), CGFloat(0),
		CGFloat(1024), CGFloat(512))
	var lines = 0
	var string = ""
	while (lines < 100) {string = string+"hello ok again \(lines)\n"; lines += 1}
	text = CATextLayer()
	text.string = string
	text.foregroundColor = CGColor.black
	text.backgroundColor = CGColor.white
	text.frame = rect
	side = CATextLayer()
	side.string = string
	side.foregroundColor = CGColor.black
	side.backgroundColor = CGColor.white
	view = getView(frame:rect)
	view.wantsLayer = true
	view.layer!.addSublayer(text)
	let mask:NSWindow.StyleMask = [.titled,.closable,.miniaturizable,.resizable]
	window = NSWindow(contentRect: rect, styleMask: mask, backing: .buffered, defer: true)
	window.title = "page"
	window.contentView = view
	let delegate = getDelegate()
	window.delegate = delegate
	window.makeKeyAndOrderFront(nil)
	NSEvent.addLocalMonitorForEvents(matching:NSEvent.EventTypeMask.mouseMoved, handler: {(event: NSEvent) in handleHint("mouseMoved"); return event})
	NSApp.run()
