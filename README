This is a collection of processes that communicate by pipe.
They read double dash files to specify polytopes, sounds, and manipulation modes.
Mouse motion can transform view, polytope, or plane.
Mouse clicks can add plane, add region, or remove region.
Asynchronous appends to double dash files wake up the file process
to change the state of other processes.

Get brew from https://brew.sh like this, allowing it to change your executable path.
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
The brew install also installs xcode command line tools.
For portaudio and lua, download build and install.
Get portaudio from http://files.portaudio.com/download.html
Get lua from http://www.lua.org/download.html
Get llvm with "brew install llvm", and add /opt/homebrew/opt/llvm/bin to your executable path.
Get ghcup from https://www.haskell.org/ghcup/ like this, allowing it to change your executable path.
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
Run ghcup list to find if ghcup upgrade install or set is needed.
Run cabal install --lib for hmatrix random and QuickCheck.
Get git with "brew install git", and get this source like this.
git clone https://git.code.sf.net/p/intxface/code intxface-code
Run the tests with "cd intxface-code", and "make".

The Theory file proves that naive.hs is algorithmic.

The make include file depend.mk is auto-generated
by executing make in a clean directory, examining error messages,
copying files, examining files, and recording dependencies.

face.c face.h facer.lua facer.hs facer.c test fork exec read write processes.
This has fork/exec/block read*/write* *Int/*Num/*Str/*New/*Old
for int/double/char*/longlong/float to/from processes in each language.

type.gen generates type.h type.c type.hs type.lua typer.h typer.c typer.hs typer.lua.
This has declarations and read*/write* for each struct/enum in each language.

file.h file.c filer.lua test open write monitor files.
Main pselects on interface pipe, waiting for commands.
Open file command opens the helper named pipe for writing,
creates a pthread with unnamed pipe, and opens given file.
Write command forwards to indicated named pipe.
Main pselects unnamed pipes and interface pipe.
The created pthread lock reads from given file til eof,
and tries for writelock on eof of helper file,
or waits for readlock on tail of circular buffer helper file.
The writelocker waits for commands in the named pipe,
lock changes the given file, writes to unnamed pipe,
and writes location and size to tail,
writes to the unnamed pipe, and loops back.
The readlocker reads the location and size from tail,
lock reads given file, writes to unnamed, and loops back.

hole.c holer.lua test read write to files on other servers.
local commands are mapped to local file of file on other server.
remote commands are mapped to local file.
responses are mapped to local or remote processes.

line.c liner.lua linra.c test stock flow sound system.
This allows simple sums of terms of coefficient
with one or two variable factors or three variable conditional
to schedule evaluations, variable changes, and interface writes on a timewheel.
Interface reads can change the set variables, their simple sums,
their values, or which is used for sound.

plane.sw planer.lua planra.sw test display mouse keyboard.
plane.c, plane.h maintain matrices according to mode.
plane.sw, plane.g maintain and trigger graphics.
This has four shaders, one to find pierce points,
one to display facets, one to stream framebuffers,
and one to detect focal point proximity to planes.
This maintains a global transformation matrix,
a matrix per polytope, and a matrix per plane.
Each maintained matrix has
pierce mode, pierce states, pierce deltas,
portion to send matrix, portion sent matrix.
Matrix sent to gpu is maintained composed with
portion sent, portion to send, and pierce delta.
All but pierce delta is cached to optimize composition.
Before changing any but pierce delta, invalidate composition cache.
Before changing pierce mode, apply pierce delta to portion to send.
After applying pierce delta, change pierce state for continuity.
Before changing maintained to matrix read from processes,
remove if is loopback from portion sent.
After writing portion to send, apply to portion sent,
and clear to identity portion to send. 
At will, read matrices, write matrices, and change pierce mode.
Each plane process monitors any number of plane files containing,
data streams for points facets arrays and matrices.

space.hs Naive.hs spacer.lua spacra.hs test specify examine sample classify.
This keeps track of which side of boundaries regions are on,
classifies planes as boundaries, samples boundaries as planes,
classifies sets of regions as polytopes, samples polytopes as region sets,
finds super- sub- co- space section,
produces points and element arrays for opengl.

core test AVAssetReader AVAssetWriter to and from av struct pipe.
tape test BMD-SDK to and from av struct pipe.
wave test IOUSBInterfaceInterface to and from av struct pipe.
frame test AVPlayerView AVCaptureScreenInput to and from av struct pipe.
phone test av struct to from audio.
page test file struct to from gui.
share test arguments that control how subsequent non-dash arguments are interpreted.
 -a flow type (factory argumewnt)
 -b script result (script to evaluate)
 -c factory flow (operation names)
  encode decode read write reque deque enque unque
 -d flow delay (zero for infinite)
 -e executable pipe (executable name)
 -f file pipe (file name)
 -g fifo pipe (file name)
 -h inet pipe (host port)
 -i input from (nest path)
 -j loop or break (nest path)
  pairs of skip mode and amount
 -k open or close (nest count)
 -l lua pipe (script strings)
 -m instead from (nest path)
 -n aswell from (nest path)
  face idents for delay are instead or aswell at path
 -o output from (nest path)
  input or output ident for factory is at path
 -p output pipe (descrptor)
 -q input pipe (descriptor)
 -rstuvwxyz control delay and parallelism

Analog input to phone includes bugle and found object percussion,
distorted by interpolation of signal at different frequencies.
Input to two of w, one with direct feedback, and the other through an s and t.
The w fan out to several u each.
The u from the direct feedback go to e with input.
The u from the indirect feedback go to v.
The v and e go to f which go to h to output. 
 a) two levels to level, (1 opamp; no feedback)
 b) two levels to edge, (1 opamp, 1 diode, 1 resistor; no feedback)
 c) slope to level, (1 opamp, 1 capacitor, 1 resistor; integral)
 d) level to slope, (1 opamp, 1 capacitor, 1 resistor; differential)
 e) edge and level to level, (2 opamps, 1 capacitor, 1 mosfet; sample)
 f) signal product, (1 opamp, 4 resistors, 2 jfet; vca)
 g) signal difference (1 opamp, 4 resistors; difference between two)
 h) signal sum, (1 opamp, 4 resistors; sum of two)
 i) several edges to edge, (dip switch not to and to or)
 j) several edges to edge, (dip switch not to and from xor)
 k) two edges to edge, (on off flip flop)
 l) knob to level, (center tap of potentiometer)
 m) edges and byte to edge (mux)
 n) edge and byte to edges (demux)
 o) four forty hertz level, (crystal)
 p) level to byte (series of comparators)
 q) byte to level, (bunch of precise resistors)
 r) edge to random byte, (noise from transistor)
 s) edge skipper, (counter and switch)
 t) edge inserter, (counter equals skipper)
 u) triangle to edge: (phase)
  output=j(sign^rising^above),
  rising=b(d(input),0),
  above=b(input,level),
  sign=j(),
  level=l(),
 v) edge to triangle: (single)
  output=c(slope),
  slope=f(length,sign),
  sign=a(k(below,above),0.5),
  above=b(output,high),
  below=b(0,output),
  length=l(),
  high=l(),
 w) level to level: (vco pll)
  output=(triangle,square),
  (reference,feedback)=input,
  square=a(k(below,above),0.5),
  above=b(triangle,high),
  below=b(low,triangle),
  triangle=c(f(feedback,error)),
  error=g(reference,triangle),
  high=l(),
  low=l(),

sculpt.lua starts file plane space to manipulate double dash polytopes.
This converts double dash commands in files
to and from commands this and other processes.

print.lua starts file space to find and tweak inflated spaces or tetrahedron overlaps.
This applies heuristics to samples from space
to find canonical examples of complete classes of spaces and overlaps,
and writes specifications to double dash files.

play.lua starts file line plane space to record user polytope sound interact.
This reads double dash files at the rate they were written,
inserts user manipulations and activations,
writes the result to a new double dash file,
while sound follows and alters polytope appearance metric configuration.
Each vertex is a harmonic pattern. The vertice's facet metrics control
loudness (where zero visible volume is too soft to hear),
harmonic set frequency (visible area of zero is too high to hear),
rhythm set duty cycle (zero visible length is too much silence between attacks to wait for).

ball.lua banks the focal point off of framebuffer decorated portions of planes.
This starts a shader that detects when any of a swarm of detector points,
surrounding the focal point, crosses a plane,
triggering a script to change the motion of the focal point,
while mouse and roller change velocity and speed of the focal point.
This also starts a shader that detects when decorated portions of planes
become visible, so framebuffer textures can be dedicated for them.
This also distorts sounds to hammer home which lines of sight are broken.

world.lua moves focal point towards or through pierce point.
Moving through a pierce point can add a user to a permissions group.
Users have read, write, and execute permissions in their groups.
Execute permission is a graph instead of a hierarchy.
Each user may create decorated boundaries for groups they have write permission in.
Decorations include posts, remote framebuffers, altenate spaces, and system sound.
