This is a collection of processes that communicate by pipe.
They read double dash files to specify polytopes, sounds, and manipulation modes.
Mouse motion can transform view, polytope, or plane.
Mouse clicks can add plane, add region, or remove region.
Asynchronous appends to double dash files wake up the file process
to change the state of other processes.

Get brew from https://brew.sh like this, allowing it to change your executable path.
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
The brew install also installs xcode command line tools.
For portaudio and lua, download build and install.
Get portaudio from http://files.portaudio.com/download.html
Get lua from http://www.lua.org/download.html
Get llvm with "brew install llvm", and add /opt/homebrew/opt/llvm/bin to your executable path.
Get ghcup from https://www.haskell.org/ghcup/ like this, allowing it to change your executable path.
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
Run ghcup list to find if ghcup upgrade install or set is needed.
Run cabal install --lib for hmatrix random and QuickCheck.
Get git with "brew install git", and get this source like this.
git clone https://git.code.sf.net/p/intxface/code intxface-code
Run the tests with "cd intxface-code", and "make".

The Theory file proves that naive.hs is algorithmic.

The make include file depend.mk is auto-generated
by building all nameable files until no new ones are built,
and examining the files for dependencies.

face.c face.h facer.lua facer.hs facer.c test fork exec read write processes.
This has fork/exec/block read*/write* *Int/*Num/*Str/*New/*Old
for int/double/char*/longlong/float to/from processes in each language.

type.gen generates type.h type.c type.hs type.lua typer.h typer.c typer.hs typer.lua.
This has declarations and read*/write* for each struct/enum in each language.

file.h file.c filer.lua test read write rmw monitor append files.
Main pselects on interface pipe,
waiting for commands.
Open file command opens the helper named pipe for writing,
creates a pthread with unnamed pipe,
and opens given file.
Write command forwards to indicated named pipe.
Main pselects unnamed pipes and interface pipe.
The created pthread round robin lock reads from given files til eof,
and tries for writelock on youngest helper file,
or waits for readlock.
The writelocker waits for commands in the named pipe,
lock changes the given file,
appends to the helper file,
writes to the unnamed pipe,
opens younger helper file if current one is too long,
and loops back.
The readlocker reads the appended command,
writes to the unnamed pipe,
and loops back.

hole.c holer.lua test read write to files on other servers.
local commands are mapped to local file of file on other server.
remote commands are mapped to local file.
responses are mapped to local or remote processes.

line.c liner.lua linra.c test stock flow sound system.
This allows simple sums of terms of coefficient
with one or two variable factors or three variable conditional
to schedule evaluations, variable changes, and interface writes on a timewheel.
Interface reads can change the set variables, their simple sums,
their values, or which is used for sound.

plane.sw planer.lua planra.sw test display mouse keyboard.
plane.c, plane.h maintain matrices according to mode.
plane.sw, plane.g maintain and trigger graphics.
This has four shaders, one to find pierce points,
one to display facets, one to stream framebuffers,
and one to detect focal point proximity to planes.
This maintains a global transformation matrix,
a matrix per polytope, and a matrix per plane.
Each maintained matrix has
pierce mode, pierce states, pierce deltas,
portion to send matrix,  portion sent matrix.
Matrix sent to gpu is maintained composed with
portion sent, portion to send, and pierce delta.
All but pierce delta is cached to optimize composition.
Before changing any but pierce delta, invalidate composition cache.
Before changing pierce mode, apply pierce delta to portion to send.
After applying pierce delta, change pierce state for continuity.
Before changing maintained to matrix read from processes,
remove if is loopback from portion sent.
After writing portion to send, apply to portion sent,
and clear to identity portion to send. 
At will, read matrices, write matrices, and change pierce mode.

space.hs Naive.hs spacer.lua spacra.hs test specify examine sample classify.
This keeps track of which side of boundaries regions are on,
classifies planes as boundaries, samples boundaries as planes,
classifies sets of regions as polytopes, samples polytopes as region sets,
finds super- sub- co- space section,
produces points and element arrays for opengl.

sculpt.lua starts file plane space to manipulate double dash polytopes.
This converts double dash commands in files
to and from commands this and other processes.

print.lua starts file space to find and tweak inflated spaces or tetrahedron overlaps.
This applies heuristics to samples from space
to find canonical examples of complete classes of spaces and overlaps,
and writes specifications to double dash files.

play.lua starts file line plane space to record user polytope sound interact.
This reads double dash files at the rate they were written,
inserts user manipulations and activations,
writes the result to a new double dash file,
while sound follows and alters polytope appearance metric configuration.
Each vertex is a harmonic pattern. The vertice's facet metrics control
loudness (where zero visible volume is too soft to hear),
harmonic set frequency (visible area of zero is too high to hear),
rhythm set duty cycle (zero visible length is too much silence between attacks to wait for).

ball.lua banks the focal point off of framebuffer decorated portions of planes.
This starts a shader that detects when any of a swarm of detector points,
surrounding the focal point, crosses a plane,
triggering a script to change the motion of the focal point,
while mouse and roller change velocity and speed of the focal point.
This also starts a shader that detects when decorated portions of planes
become visible, so framebuffer textures can be dedicated for them.
This also distorts sounds to hammer home which lines of sight are broken.

world.lua moves focal point towards or through pierce point.
Moving through a pierce point can add a user to a permissions group.
Users have read, write, and execute permissions in their groups.
Execute permission is a graph instead of a hierarchy.
Each user may create decorated boundaries for groups they have write permission in.
Decorations include posts, remote framebuffers, altenate spaces, and system sound.

text test file to pipe face structs to/from file structs.
 -i (single) environment variable name for read pipe descriptor
 -o (ordered) environment variable name for write pipe descriptor
 -f (optional) environment variable name pair for file descriptor
 -s (ordered) for lua script to filter to subsequent -o
 -e (ordered) lua expression to filter to subsequent -o
 -x (ordered) regular expression to filter to subsequent -o
 -z (ordered) prior -s -e -x do not apply to following -o
save test AVAssetWriter to pipe data structs to file and forward to pipe.
 -i (single) environment variable name for read pipe descriptor
 -o (multiple) environment variable name for write pipe descriptor
 -f (optional) file name to write audio video to
read test AVAssetReader to pipe data structs from file.
 -o (single) environment variable name for write pipe descriptor
 -f (single) file name to read audio video from
view test AVPlayerView to pipe data structs to display.
 -i (single) environment variable name for read pipe descriptor
tape test BMD-SDK to pipe data structs from hdmi.
 -o (single) environment variable name for write pipe descriptor
show test BMD-SDK pipe data structs to hdmi.
 -i (single) environment variable name for read pipe descriptor
wave test IOUSBInterfaceInterface to pipe data structs from usb waveform.
 -o (single) environment variable name for write pipe descriptor
desk test AVCaptureScreenInput to pipe data structs from screen capture.
 -o (single) environment variable name for write pipe descriptor
tile test serial or parallel data structs to one.
 -i (ordered) environment variable name for read pipe descriptor
 -o (single) environment variable name for write pipe descriptor
 -p (ordered) priority of overlapping data structs from following -i
 -r (ordered) frame rate for following -i, 0.0 frozen, 1.0 realtime
 -a -b -c (ordered) clipping shaping placement for following -i
 -d (ordered) delay before following -p -r -a -b -c take effect
 -t (ordered) time for following -p -r -a -b -c to take effect
 -z (ordered) prior -p -r -a -b -c -d -t do not apply to following -i
 -c (optional) write as fast as possible, rates and times are relative

edit test file handle per tab or window.
This presents a readonly scrollable searchable highlightable text widget,
a scrollable searchable clickable list widget of file changes,
an entry widget that atomically writes highlighted fields upon enter,
menu items to configure file process, and per tab or window,
field separators, file name, process given file pipes and name.

link test file to start processes connected by pipes.
Each line in a control file is space separated arguments,
pipe setting read and write ends of pipe to environment variables,
save taking read and write av pipes,
text, hole, line, plane, space taking read and write face pipes,
view, show taking read av pipes,
read, tape, wave, desk taking write av pipes,
tile taking read and write av pipes.

