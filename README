/*
*    README
*
*    This program is free software: you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation, either version 3 of the License, or
*    (at your option) any later version.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

This is a collection of processes that communicate by pipe.
They read double dash files to specify polytopes, sounds,
and manipulation modes.
Mouse motion can transform view, polytope, or plane.
Mouse clicks can add plane, add region, or remove region.
Asynchronous appends to double dash files wake up the file process
to change the state of other processes.

face.c face.h facer.lua facer.hs facer.c facra.c
test fork exec read write processes.
This has poll* read* write* *Char *Int *Float *Double
*String *Chars *Ints *Floats *Doubles forkExec for each language.

types.sh generates types.lua types.h types.c Types.hs.
This has poll* read* write* for each struct in each language,
and name* for each enum value.

file.c file.h filer.lua filra.c test read write monitor append files.
Main pselects on interface pipe, waiting for commands.
Open file command opens the helper named pipe for writing,
creates a pthread with unnamed pipe, and opens given file.
Write command forwards to indicated named pipe.
Main round robin lock reads from given files til eof,
and pselects unnamed pipes and interface pipe.
The created pthread tries for writelock on youngest helper file,
or waits for readlock.
The writelocker waits for commands in the named pipe,
lock changes the given file, appends to the helper file,
writes to the unnamed pipe,
opens younger helper file if current one is too long, and loops back.
The readlocker reads the appended command, lock reads the given file,
writes to unnamed pipe, and loops back.

time.c timer.lua timra.c test stock flow sound system.
This allows simple sums of terms of coefficient
with one or two variable factors or three variable conditional
to schedule evaluations, variable changes, and interface writes on a timewheel.
Interface reads can change the set variables, their simple sums,
their values, or which is used for sound.

plane.c planer.lua planra.c test opengl display mouse keyboard.
This has two shaders, one to find pierce points and one to display facets.
This maintains a global transformation matrix, a matrix per polytope,
one for manipulating individual planes,
copies of the matrices from when fixed point is saved,
and copies from when matrices are sent to synchronize with other processes.

space.hs Naive.hs spacer.lua spacra.hs test specify examine sample classify.
This keeps track of which side of boundaries regions are on,
classifies planes as boundaries, samples boundaries as planes,
classifies sets of regions as polytopes, samples polytopes as region sets,
finds super- sub- co- space section,
produces points and element arrays for opengl.

sculpt.lua starts plane space to manipulating double dash polytopes.
This converts double dash commands in files
to and from commands in other processes.

print.lua starts space to find and tweak inflated spaces or tetrahedron overlaps.
This applies heuristics to samples from space
to find canonical examples of complete classes of spaces and overlaps,
and writes specifications to double dash files.

play.lua starts time plane space to record user polytope sound interact.
This reads double dash files at the rate they were written,
inserts user manipulations and activations,
writes the result to a new double dash file,
while sound follows and alters polytope appearance metric configuration.

