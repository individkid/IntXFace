--[[
*    type.gen
*    Copyright (C) 2019  Paul Coelho
*
*    This program is free software: you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation, either version 3 of the License, or
*    (at your option) any later version.
*
*    This program is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.
--]]

dofile("type.src")

--HERE Enums
Action = {
	"NewThd",
	"FncThd",
	"TstThd",
	"CmdThd",
	"CfgThd",
	"ThdCmd",
	"ThdCfg",
	"EndThd",
	"ThdEnd",
	"EndPrc",
	"PrcEnd",
}
Opcode = {
	"Replace",
	"Compose",
	"Apply",
}
State = {
	"Stock",
	"Start",
	"Assign",
	"Bind",
	"Wave",
	"Timer",
	"Audio",
}
Flow = {
	"Sched",
	"Back",
	"Peek",
	"Poke",
	"Store",
	"Load",
}
Source = {
	"Line",
	"Plane",
	"Space",
}
Function = {
	"Rmw0",
	"Rmw1",
	"Rmw2",
	"Copy",
	"Save",
	"Dma0",
	"Dma1",
	"Draw",
	"Port",
}
Memory = {
	"Triangle",
	"Corner",
	"Frame",
	"Base",
	"Range",
	"Active",
	"Basis",
	"Subject",
	"Object",
	"Feature",
	"Render",
	"Pierce",
	"Cloud",
	"User",
}
Matrix = {
	"Global",
	"Several",
	"Single",
}
Click = {
	"Complete",
	"Transform",
	"Refine",
	"Additive",
	"Subtractive",
	"Script",
	"Suspend",
}
Move = {
	"Rotate", -- rotate about fixed pierce point
	"Slide", -- translate parallel to fixed facet
	"Slate", -- translate parallel to picture plane
}
Roll = {
	"Cylinder", -- rotate with rotated fixed axis
	"Clock", -- rotate with fixed normal to picture plane
	"Compass", -- rotate with fixed normal to facet
	"Normal", -- translate with fixed normal to facet
	"Balloon", -- scale with fixed pierce point
	"Focal", -- adjust focal length
	"Picture" -- adjust frustrum height
}
Shader = {
	"Proximity",
	"Display",
	"Stream",
	"Track",
}
Config = {
	"Table",
	"Sides",
}
--HERE Structs
File = {
	{"act","Action",{},{}},
	{"opc","Opcode",{["act"]={["FncThd"]=true,["CmdThd"]=true}},{}},
	{"idx","int",{["act"]={["NewThd"]=true,["FncThd"]=true,["CmdThd"]=true,["CfgThd"]=true,
		["ThdCmd"]=true,["ThdCfg"]=true,["EndThd"]=true,["ThdEnd"]=true}},{}},
	{"loc","long long",{["act"]={["CmdThd"]=true,["ThdCmd"]=true,["ThdCfg"]=true}},{}},
	{"pid","long long",{["act"]={["EndThd"]=true}},{}},
	{"num","int",{["act"]={["NewThd"]=true,["FncThd"]=true,["TstThd"]=true,["CmdThd"]=true,
		["CfgThd"]=true,["ThdCmd"]=true,["ThdCfg"]=true}},{}},
	{"siz","int",{["act"]={["NewThd"]=true,["FncThd"]=true,["TstThd"]=true,["CmdThd"]=true,
		["CfgThd"]=true,["ThdCmd"]=true,["ThdCfg"]=true}},"num"},
	{"ptr","char*",{["act"]={["NewThd"]=true,["FncThd"]=true,["TstThd"]=true,["CmdThd"]=true,
		["CfgThd"]=true,["ThdCmd"]=true,["ThdCfg"]=true}},"num"},
}
Term0 = {
	{"cff","double",{},{}},
}
Term1 = {
	{"cff","double",{},{}},
	{"vry","int",{},{1}},
}
Term2 = {
	{"cff","double",{},{}},
	{"vry","int",{},{2}},
}
Term3 = {
	{"cff","double",{},{}},
	{"vry","int",{},{3}},
}
Nomial = {
	{"num0","int",{},{}},
	{"trm0","Term0",{},"num0"},
	{"num1","int",{},{}},
	{"trm1","Term1",{},"num1"},
	{"num2","int",{},{}},
	{"trm2","Term2",{},"num2"},
	{"num3","int",{},{}},
	{"trm3","Term3",{},"num3"},
}
Ratio = {
	{"num","Nomial",{},{}},
	{"den","Nomial",{},{}},
}
Event = {
	{"tag","State",{},{}},
	{"idx","int",{},{}},
	{"oth","int",{},{}},
	{"key","double",{},{}},
	{"val","double",{},{}},
    {"upd","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"dly","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"sch","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"flw","Flow",{["tag"]={["Bind"]=true}},{}},
	{"siz","int",{["tag"]={["Wave"]=true}},{}},
	{"buf","double",{["tag"]={["Wave"]=true}},"siz"},
	{"met","Metric",{["tag"]={["Timer"]=true}},1},
	{"wrp","double",{["tag"]={["Audio"]=true}},{}},
	{"gap","int",{["tag"]={["Audio"]=true}},{}},
	{"cdt","int",{["tag"]={["Audio"]=true}},{}},
	{"len","int",{["tag"]={["Audio"]=true}},{}},
	{"enb","int",{["tag"]={["Audio"]=true}},{}},
}
Facet = {
	{"plane","float",{},{3}}, -- 0+12
	{"pad0","int",{},{1}}, -- 12+4
	{"versor","int",{},{}}, -- 16+4
	{"pad1","int",{},{3}}, -- 20+12
	{"point","int",{},{3}}, -- 32+12
	{"pad2","int",{},{1}}, -- 44+4
	{"coord","float",{},{3,2}}, -- 48+24
	{"pad3","int",{},{2}}, -- 72+8
	{"color","float",{},{3,4}}, -- 80+48
	{"poly","int",{},{}}, -- 128+4
	{"tag","int",{},{}}, -- 132+4
	{"pad4","int",{},{2}}, -- 136+8
}
Vertex = {
	{"plane","int",{},{3}},
	{"pad","int",{},{1}},
}
Array = {
	{"idx","int",{},{}},
	{"siz","int",{},{}},
	{"tag","int",{},{}},
}
Affine = {
	{"val","float",{},{4,4}},
}
Linear = {
	{"val","float",{},{9,4}},
}
Vector = {
	{"val","float",{},{4}},
}
Cursor = {
	{"val","float",{},{2}},
}
Mode = {
	{"matrix","Matrix",{},{}},
	{"click","Click",{},{}},
	{"move","Move",{},{}},
	{"roll","Roll",{},{}},
	{"shader","Shader",{},{}},
	{"hand","int",{},{}},
}
Client = {
	{"mem","Memory",{},{}},
	{"len","int",{},{}},
	{"fnc","Function",{},"len"},
	{"idx","int",{},{}},
	{"siz","int",{},{}},
	{"triangle","Facet",{["mem"]={["Triangle"]=true}},"siz"},
	{"corner","Vertex",{["mem"]={["Corner"]=true}},"siz"},
	{"frame","int",{["mem"]={["Frame"]=true}},"siz"},
	{"base","int",{["mem"]={["Base"]=true}},"siz"},
	{"range","Array",{["mem"]={["Range"]=true}},"siz"},
	{"active","Array",{["mem"]={["Active"]=true}},"siz"},
	{"basis","Linear",{["mem"]={["Basis"]=true}},"siz"},
	{"subject","Affine",{["mem"]={["Subject"]=true}},"siz"},
	{"object","Affine",{["mem"]={["Object"]=true}},"siz"},
	{"feature","Affine",{["mem"]={["Feature"]=true}},"siz"},
	{"render","Vector",{["mem"]={["Render"]=true}},"siz"},
	{"pierce","Vector",{["mem"]={["Pierce"]=true}},"siz"},
	{"cloud","Vector",{["mem"]={["Cloud"]=true}},"siz"},
	{"user","Mode",{["mem"]={["User"]=true}},"siz"},
}
Sculpt = {
	{"cfg","Config",{},{}},
}
Metric = {
	{"src","Source",{},{}},
	{"num","int",{["src"]={["Line"]=true}},{}},
	{"tot","int",{["src"]={["Line"]=true}},{}},
	{"siz","int",{["src"]={["Line"]=true}},"num"},
	{"idx","int",{["src"]={["Line"]=true}},"num"},
	{"val","double",{["src"]={["Line"]=true}},"tot"},
	{"plane","Client",{["src"]={["Plane"]=true}},1},
}
--HERE
Enums,Enumz = listHere("Enums","type.gen")
Structs,Structz = listHere("Structs","type.gen")
function showTypeC()
	local result = ""
	result = result.."#include \"face.h\"\n"
	result = result.."#include \"base.h\"\n"
	result = result.."#include \"type.h\"\n"
	result = result..showCallC()
	return result
end
function showTypeHs()
	local result = ""
	result = result.."module Type where\n"
	result = result.."--\n"
	result = result.."import Face\n"
	result = result.."import System.Environment\n"
	result = result.."import System.Exit\n"
	result = result.."--\n"
	result = result..showCallHs()
	return result
end
function showTypeLua()
	local result = ""
	result = result.."require \"face\"\n"
	result = result.."--\n"
	result = result..showCallLua()
	return result
end
function showTypeSw()
	local result = ""
	result = result.."import face\n"
	result = result..showCallSw()
	return result
end
if (arg[1] == "type.h") then
	file = io.open("type.h", "w")
	file:write(showCallH().."\n")
	file:close()
end
if (arg[1] == "type.c") then
	file = io.open("type.c", "w")
	file:write(showTypeC().."\n")
	file:close()
end
if (arg[1] == "type.hs") then
	file = io.open("type.hs", "w")
	file:write(showTypeHs().."\n")
	file:close()
end
if (arg[1] == "type.lua") then
	file = io.open("type.lua", "w")
	file:write(showTypeLua().."\n")
	file:close()
end
--[[
if (arg[1] == "type.sw") then
	file = io.open("type.sw", "w")
	file:write(showTypeSw().."\n")
	file:close()
end
--]]
