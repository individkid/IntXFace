dofile("type.src")

--HERE Enums
Action = {
	"NewHub",
	"CfgHub",
	"HubCfg",
	"ThdHub",
	"HubThd",
	"ThdThd",
}
State = {
	"Stock",
	"Start",
	"Assign",
	"Bind",
	"Wave",
	"Timer",
	"Audio",
}
Flow = {
	"Sched",
	"Back",
	"Peek",
	"Poke",
	"Store",
	"Load",
}
Source = {
	"Line", -- metric comes from sound system
	"Plane", -- metric comes from video system
	"Space", -- metric comes from idea system
}
Function = {
	"Rmw0", -- update matrix from user
	"Rmw1", -- update matrix from other
	"Copy", -- directly update current matrix
	"Save", -- directly update saved matrix
	"Dma0", -- transfer single to gpu
	"Dma1", -- transfer multiple to gpu
	"Gpu0", -- update display
	"Gpu1", -- find pierce point
	"Port", -- send metric
	"Atom", -- process list of clients
}
Memory = {
	"Triangle", -- plane gouping backlinks decoration
	"Corner", -- links to planes
	"Frame", -- link to point, arrayed by three
	"Base", -- link to plane, randomly arrayed
	"Range", -- grouping of link to point
	"Active", -- grouping of link to plane
	"Basis", -- convert plane to points
	"Subject", -- transform all points
	"Object", -- transform file points
	"Feature", -- transform plane points
	"Render", -- apply clipping perspective
	"Archer", -- find pierce point
	"Cloud", -- find collisions
	"Pierce", -- found pierce point
	"User", -- interpret mouse
	"Macro", -- capture keystrokes
	"Process", -- functions to apply atomically
}
Matrix = {
	"Global", -- transorm matrix for all points
	"Several", -- transform matrix for file points
	"Single", -- transform matrix for plane points
}
Click = {
	"Complete", -- wait for pierce point
	"Transform", -- apply move and roll to transform matrix
	"Refine", -- add random point through pierce point
	"Additive", -- add region over pierce point
	"Subtractive", -- remove region under pierce point
	"Script", -- execute script on pierce point
	"Suspend", -- temporarily ignore mouse
}
Move = {
	"Rotate", -- rotate about fixed pierce point
	"Slide", -- translate parallel to fixed facet
	"Slate", -- translate parallel to picture plane
}
Roll = {
	"Cylinder", -- rotate with rotated fixed axis
	"Clock", -- rotate with fixed normal to picture plane
	"Compass", -- rotate with fixed normal to facet
	"Normal", -- translate with fixed normal to facet
	"Balloon", -- scale with fixed pierce point
	"Focal", -- adjust focal length
	"Picture", -- adjust frustrum height
}
Ture = {
	"Table",
	"Sides",
}
--HERE Structs
File = {
	{"act","Action",{},{}},
	{"idx","Int",{},{}},
	{"loc","New",{["act"]={["ThdThd"]=true,
		["HubThd"]=true,["ThdHub"]=true,
		["HubCfg"]=true,["CfgHub"]=true}},{}},
	{"pid","New",{["act"]={["ThdThd"]=true,
		["HubThd"]=true,["ThdHub"]=true}},{}},
	{"slf","Int",{["act"]={["HubCfg"]=true}},{}},
	{"str","Str",{["act"]={["NewHub"]=true,
		["HubThd"]=true,["ThdHub"]=true,
		["HubCfg"]=true,["CfgHub"]=true}},{}},
	{"siz","New",{["act"]={["ThdThd"]=true}},{}},
}
Term0 = {
	{"cff","Num",{},{}},
}
Term1 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{1}},
}
Term2 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{2}},
}
Term3 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{3}},
}
Nomial = {
	{"num0","Int",{},{}},
	{"trm0","Term0",{},"num0"},
	{"num1","Int",{},{}},
	{"trm1","Term1",{},"num1"},
	{"num2","Int",{},{}},
	{"trm2","Term2",{},"num2"},
	{"num3","Int",{},{}},
	{"trm3","Term3",{},"num3"},
}
Ratio = {
	{"num","Nomial",{},{}},
	{"den","Nomial",{},{}},
}
Event = {
	{"tag","State",{},{}},
	{"idx","Int",{},{}},
	{"oth","Int",{},{}},
	{"key","Num",{},{}},
	{"val","Num",{},{}},
    {"upd","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"dly","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"sch","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"flw","Flow",{["tag"]={["Bind"]=true}},{}},
	{"siz","Int",{["tag"]={["Wave"]=true}},{}},
	{"buf","Num",{["tag"]={["Wave"]=true}},"siz"},
	{"num","Int",{["tag"]={["Timer"]=true}},{}},
	{"tot","Int",{["tag"]={["Timer"]=true}},{}},
	{"ids","Int",{["tag"]={["Timer"]=true}},"num"},
	{"req","Int",{["tag"]={["Timer"]=true}},"num"},
	{"rsp","Num",{["tag"]={["Timer"]=true}},"tot"},
	{"wrp","Num",{["tag"]={["Audio"]=true}},{}},
	{"gap","Int",{["tag"]={["Audio"]=true}},{}},
	{"cdt","Int",{["tag"]={["Audio"]=true}},{}},
	{"len","Int",{["tag"]={["Audio"]=true}},{}},
	{"enb","Int",{["tag"]={["Audio"]=true}},{}},
}
Facet = {
	{"plane","Old",{},{3}}, -- 0+12
	{"pad0","Int",{},{1}}, -- 12+4
	{"versor","Int",{},{}}, -- 16+4
	{"pad1","Int",{},{3}}, -- 20+12
	{"point","Int",{},{3}}, -- 32+12
	{"pad2","Int",{},{1}}, -- 44+4
	{"coord","Old",{},{3,2}}, -- 48+24
	{"pad3","Int",{},{2}}, -- 72+8
	{"color","Old",{},{3,4}}, -- 80+48
	{"poly","Int",{},{}}, -- 128+4
	{"tag","Int",{},{}}, -- 132+4
	{"pad4","Int",{},{2}}, -- 136+8
}
Vertex = {
	{"plane","Int",{},{3}},
	{"pad","Int",{},{1}},
}
Index = {
	{"point","Int",{},{}},
	{"tag","Int",{},{}},
}
Array = {
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
}
Linear = {
	{"val","Old",{},{9,4}},
}
Affine = {
	{"val","Old",{},{4,4}},
}
Vector = {
	{"val","Old",{},{4}},
}
Result = {
	{"plane","Int",{},{}},
	{"point","Old",{},{4}},
	{"normal","Old",{},{4}},
}
Mode = {
	{"matrix","Matrix",{},{}},
	{"click","Click",{},{}},
	{"move","Move",{},{}},
	{"roll","Roll",{},{}},
	{"hand","Int",{},{}},
}
Client = {
	{"mem","Memory",{},{}},
	{"lpb","Int",{},{}},
	{"len","Int",{},{}},
	{"fnc","Function",{},"len"},
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
	{"triangle","Facet",{["mem"]={["Triangle"]=true}},"siz"},
	{"corner","Vertex",{["mem"]={["Corner"]=true}},"siz"},
	{"frame","Index",{["mem"]={["Frame"]=true}},"siz"},
	{"base","Int",{["mem"]={["Base"]=true}},"siz"},
	{"range","Array",{["mem"]={["Range"]=true}},"siz"},
	{"active","Array",{["mem"]={["Active"]=true}},"siz"},
	{"basis","Linear",{["mem"]={["Basis"]=true}},"siz"},
	{"subject","Affine",{["mem"]={["Subject"]=true}},"siz"},
	{"object","Affine",{["mem"]={["Object"]=true}},"siz"},
	{"feature","Affine",{["mem"]={["Feature"]=true}},"siz"},
	{"render","Vector",{["mem"]={["Render"]=true}},"siz"},
	{"archer","Vector",{["mem"]={["Archer"]=true}},"siz"},
	{"cloud","Vector",{["mem"]={["Cloud"]=true}},"siz"},
	{"pierce","Result",{["mem"]={["Pierce"]=true}},"siz"},
	{"user","Mode",{["mem"]={["User"]=true}},"siz"},
	{"macro","Chr",{["mem"]={["Macro"]=true}},"siz"},
	{"process","Client",{["mem"]={["Process"]=true}},"siz"},
}
Sculpt = {
	{"cfg","Ture",{},{}},
}
Metric = {
	{"src","Source",{},{}},
	{"line","Event",{["src"]={["Line"]=true}},1},
	{"plane","Client",{["src"]={["Plane"]=true}},1},
}
--HERE
Enums,Enumz = listHere("Enums","type.gen")
Structs,Structz = listHere("Structs","type.gen")
function showTypeC()
	local result = ""
	result = result.."#include \"face.h\"\n"
	result = result.."#include \"type.h\"\n"
	result = result.."#include <stdlib.h>\n"
	result = result.."#include <string.h>\n"
	result = result.."#include <stdio.h>\n"
	result = result.."#include <unistd.h>\n"
	result = result.."#include <sys/errno.h>\n"
	result = result..showCallC()
	return result
end
function showTypeH()
	local result = ""
	result = result..showCallH()
	return result
end
function showTypeHs()
	local result = ""
	result = result.."module Type where\n"
	result = result.."--\n"
	result = result.."import Face\n"
	result = result.."import System.Environment\n"
	result = result.."import System.Exit\n"
	result = result.."--\n"
	result = result..showCallHs()
	return result
end
function showTypeLua()
	local result = ""
	result = result.."require \"face\"\n"
	result = result.."--\n"
	result = result..showCallLua()
	return result
end
function showTypeSw()
	local result = ""
	result = result.."import face\n"
	result = result..showCallSw()
	return result
end
if (arg[1] == "type.h") then
	file = io.open("type.h", "w")
	file:write(showTypeH().."\n")
	file:close()
end
if (arg[1] == "type.c") then
	file = io.open("type.c", "w")
	file:write(showTypeC().."\n")
	file:close()
end
if (arg[1] == "type.hs") then
	file = io.open("type.hs", "w")
	file:write(showTypeHs().."\n")
	file:close()
end
if (arg[1] == "type.lua") then
	file = io.open("type.lua", "w")
	file:write(showTypeLua().."\n")
	file:close()
end
if (arg[1] == "type.sw") then
	file = io.open("type.sw", "w")
	file:write(showTypeSw().."\n")
	file:close()
end
