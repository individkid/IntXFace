dofile("type.src")

--HERE Enums
Goal = {
	"NewHub",
	"CfgHub",
	"AppHub",
	"ThdHub",
	"HubThd",
	"AppThd",
	"ThdThd",
	"HubCfg",
	"ThdErr",
	"HubErr",
}
State = {
	"Stock",
	"Start",
	"Assign",
	"Bind",
	"Wave",
	"Timer",
	"Audio",
}
Flow = {
	"Sched",
	"Back",
	"Peek",
	"Poke",
	"Store",
	"Load",
}
Command = {
	"SetCmd", -- set memory
	"GetCmd", -- get memory
	"GotCmd", -- got memory
	"UseCmd", -- use memory
	"FixCmd", -- fix memory
}
Memory = {
	"Numericz", -- distances of plane above selected base
	"Vertexz", -- intersection of backlinked planes
	"Polytopez", -- matrix per set of planes
	"Swarmz", -- array of points around focal point
	"Texturez", -- memory for textures
	"Basez", -- base for each dimension
	"Allmatz", -- whole view transformation
	"Onematz", -- single face transformation
	"Featherz", -- pierce direction
	"Arrowz", -- pierce start position
	"Focalz", -- focal point
	"Picturez", -- picture plane origin
	"Indexz", -- index into texture array
	"Sizez", -- number of swarm points
	"Piercez", -- pierce point normal and valid
	"Ranjez", -- plane or point index ranges
	"Atwillz", -- set atwill
	"Actionz", -- set action
	"Selectz", -- set select
	"Machinez", -- set machine
	"Shaderz", -- set shader
	"HandWorkz", -- hand work
	"HandToolz", -- hand tool
	"FingerWorkz", -- finger work
	"FingerToolz", -- finger tool
	"WarpHandz", -- warp hand
	"WarpFingerz", -- warp finger
	"WarpClickz", -- warp click
}
Atwill = {
	"Atoften", -- hand or finger
	"Atrarely", -- change to enum
	"Atonce", -- just once now
	"Atnever", -- upon request
}
Action = {
	"Transform", -- pierce or display
	"Additive", -- pierce and identify
	"Subtract", -- pierce and identify
}
Select = {
	"Universe", -- entire view
	"Polytope", -- set of planes
	"Triangle", -- single plane
}
Machine = {
	"Idle", -- run no shader
	"Solve", -- run cospace shader
	"Test", -- run test shader
	"Select", -- run pierce shader
	"Move", -- run display shader
	"Roll", -- run display shader
}
Shader = {
	"Contain", -- use points
	"Compute", -- use planes
}
Work = {
	"Picture", -- picture plane normal
	"Surface", -- pierced plane normal
	"Cursor", -- from cursor to pierce
}
Tool = {
	"Translate", -- parallel or perpendicular
	"Rotate", -- around axis or point
}
Ture = {
	"Table",
	"Sides",
}
--HERE Structs
File = {
	{"act","Goal",{},{}},
	{"idx","Int",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true
	}},{}},
	{"loc","New",{["act"]={
		["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true,
		["HubCfg"]=true
	}},{}},
	{"pid","New",{["act"]={
		["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true
	}},{}},
	{"slf","Int",{["act"]={
		["HubCfg"]=true
	}},{}},
	{"str","Str",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true,["HubErr"]=true
	}},{}},
	{"siz","New",{
		["act"]={["ThdThd"]=true
	}},{}},
}
Term0 = {
	{"cff","Num",{},{}},
}
Term1 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{1}},
}
Term2 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{2}},
}
Term3 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{3}},
}
Nomial = {
	{"num0","Int",{},{}},
	{"trm0","Term0",{},"num0"},
	{"num1","Int",{},{}},
	{"trm1","Term1",{},"num1"},
	{"num2","Int",{},{}},
	{"trm2","Term2",{},"num2"},
	{"num3","Int",{},{}},
	{"trm3","Term3",{},"num3"},
}
Ratio = {
	{"num","Nomial",{},{}},
	{"den","Nomial",{},{}},
}
Event = {
	{"tag","State",{},{}},
	{"idx","Int",{},{}},
	{"oth","Int",{},{}},
	{"key","Num",{},{}},
	{"val","Num",{},{}},
    {"upd","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"dly","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"sch","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"flw","Flow",{["tag"]={["Bind"]=true}},{}},
	{"siz","Int",{["tag"]={["Wave"]=true}},{}},
	{"buf","Num",{["tag"]={["Wave"]=true}},"siz"},
	{"num","Int",{["tag"]={["Timer"]=true}},{}},
	{"tot","Int",{["tag"]={["Timer"]=true}},{}},
	{"ids","Int",{["tag"]={["Timer"]=true}},"num"},
	{"req","Int",{["tag"]={["Timer"]=true}},"num"},
	{"rsp","Num",{["tag"]={["Timer"]=true}},"tot"},
	{"wrp","Num",{["tag"]={["Audio"]=true}},{}},
	{"gap","Int",{["tag"]={["Audio"]=true}},{}},
	{"cdt","Int",{["tag"]={["Audio"]=true}},{}},
	{"len","Int",{["tag"]={["Audio"]=true}},{}},
	{"enb","Int",{["tag"]={["Audio"]=true}},{}},
}
Uniform = {
	{"bas","Old",{},{36}},
	{"all","Old",{},{16}},
	{"one","Old",{},{16}},
	{"fea","Old",{},{4}},
	{"arw","Old",{},{4}},
	{"foc","Old",{},{4}},
	{"pic","Old",{},{4}},
	{"idt","Int",{},{}}, -- which plane to apply one matrix to
	{"sze","Int",{},{}}, -- how many swarm points there are
	{"pad","Int",{},{2}},
}
Numeric = {
	{"vec","Old",{},{4}}, -- distances above basis
	{"ref","Int",{},{4}}, -- points on plane
	{"bas","Int",{},{}}, -- basis selector
	{"pol","Int",{},{}}, -- polytope plane is in
	{"tex","Int",{},{}}, -- texture index
	{"pad","Int",{},{}},
}
Vertex = {
	{"vec","Old",{},{4}}, -- intersection of planes
	{"ref","Int",{},{4}}, -- backreference to planes
}
Vector = {
	{"vec","Old",{},{4}},
}
Matrix = {
	{"mat","Old",{},{16}},
}
Basis = {
	{"mat","Vector",{},{9}},
}
Pierce = {
	{"fix","Old",{},{4}},
	{"nml","Old",{},{4}},
	{"vld","Int",{},{}},
	{"pad","Int",{},{3}},
}
Ranje = {
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
	{"pad","Int",{},{2}},
}
Client = {
	{"cmd","Command",{},{}},
	{"mem","Memory",{},{}},
	{"siz","Int",{},{}},
	{"idx","Int",{},{}},
	{"slf","Int",{},{}},
	{"num","Numeric",{["mem"]={["Numericz"]=true}},"siz"},
	{"vtx","Vertex",{["mem"]={["Vertexz"]=true}},"siz"},
	{"pol","Matrix",{["mem"]={["Polytopez"]=true}},"siz"},
	{"swa","Vector",{["mem"]={["Swarmz"]=true}},"siz"},
	{"tex","Vector",{["mem"]={["Texturez"]=true}},"siz"},
	{"bas","Basis",{["mem"]={["Basez"]=true}},"siz"},
	{"all","Matrix",{["mem"]={["Allmatz"]=true}},"siz"},
	{"one","Matrix",{["mem"]={["Onematz"]=true}},"siz"},
	{"fea","Vector",{["mem"]={["Featherz"]=true}},"siz"},
	{"arw","Vector",{["mem"]={["Arrowz"]=true}},"siz"},
	{"foc","Vector",{["mem"]={["Focalz"]=true}},"siz"},
	{"pic","Vector",{["mem"]={["Picturez"]=true}},"siz"},
	{"idt","Int",{["mem"]={["Indexz"]=true}},"siz"},
	{"sze","Int",{["mem"]={["Sizez"]=true}},"siz"},
	{"pie","Pierce",{["mem"]={["Piercez"]=true}},"siz"},
	{"rng","Ranje",{["mem"]={["Ranjez"]=true}},"siz"},
	{"atw","Atwill",{["mem"]={["Atwillz"]=true}},"siz"},
	{"act","Action",{["mem"]={["Actionz"]=true}},"siz"},
	{"sel","Select",{["mem"]={["Selectz"]=true}},"siz"},
	{"mac","Machine",{["mem"]={["Machinez"]=true}},"siz"},
	{"sha","Shader",{["mem"]={["Shaderz"]=true}},"siz"},
	{"hws","Work",{["mem"]={["HandWorkz"]=true}},"siz"},
	{"hts","Tool",{["mem"]={["HandToolz"]=true}},"siz"},
	{"fws","Work",{["mem"]={["FingerWorkz"]=true}},"siz"},
	{"fts","Tool",{["mem"]={["FingerToolz"]=true}},"siz"},
	{"whs","Old",{["mem"]={["WarpHandz"]=true}},"siz"},
	{"wfs","Old",{["mem"]={["WarpFingerz"]=true}},"siz"},
	{"wcs","Old",{["mem"]={["WarpClickz"]=true}},"siz"},
}
Sculpt = {
	{"cfg","Ture",{},{}},
}
--HERE
Enums,Enumz = listHere("Enums","type.gen")
Structs,Structz = listHere("Structs","type.gen")
function showTypeC()
	local result = ""
	result = result.."#include \"face.h\"\n"
	result = result.."#include \"type.h\"\n"
	result = result.."#include <stdlib.h>\n"
	result = result.."#include <string.h>\n"
	result = result.."#include <stdio.h>\n"
	result = result.."#include <unistd.h>\n"
	result = result.."#include <sys/errno.h>\n"
	result = result..showCallC()
	return result
end
function showTypeH()
	local result = ""
	result = result.."typedef void (*sftype)(const char*,int,int,void*);\n"
	result = result..showCallH()
	return result
end
function showTypeHs()
	local result = ""
	result = result.."module Type where\n"
	result = result.."--\n"
	result = result.."import Face\n"
	result = result.."import System.Environment\n"
	result = result.."import System.Exit\n"
	result = result.."--\n"
	result = result..showCallHs()
	return result
end
function showTypeLua()
	local result = ""
	result = result.."require \"face\"\n"
	result = result.."--\n"
	result = result..showCallLua()
	return result
end
function showTypeSw()
	local result = ""
	result = result.."import face\n"
	result = result..showCallSw()
	return result
end
if (arg[1] == "type.h") then
	file = io.open("type.h", "w")
	file:write(showTypeH().."\n")
	file:close()
end
if (arg[1] == "type.c") then
	file = io.open("type.c", "w")
	file:write(showTypeC().."\n")
	file:close()
end
if (arg[1] == "type.hs") then
	file = io.open("type.hs", "w")
	file:write(showTypeHs().."\n")
	file:close()
end
if (arg[1] == "type.lua") then
	file = io.open("type.lua", "w")
	file:write(showTypeLua().."\n")
	file:close()
end
if (arg[1] == "type.sw") then
	file = io.open("type.sw", "w")
	file:write(showTypeSw().."\n")
	file:close()
end
