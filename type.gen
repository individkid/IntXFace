dofile("type.src")

--HERE Enums
Goal = {
	"NewHub",
	"CfgHub",
	"AppHub",
	"ThdHub",
	"HubThd",
	"AppThd",
	"ThdThd",
	"HubCfg",
	"ThdErr",
	"HubErr",
}
State = {
	"Stock",
	"Start",
	"Assign",
	"Bind",
	"Wave",
	"Timer",
	"Audio",
}
Flow = {
	"Sched",
	"Back",
	"Peek",
	"Poke",
	"Store",
	"Load",
}
Command = {
	"AtwCmd", -- set atwill
	"ActCmd", -- set action
	"SelCmd", -- set select
	"MchCmd", -- set machine
	"ShaCmd", -- set shader
	"HrkCmd", -- hand work
	"HooCmd", -- hand tool
	"FrkCmd", -- finger work
	"FooCmd", -- finger tool
	"HndCmd", -- warp hand
	"FgrCmd", -- warp finger
	"ClcCmd", -- warp click
	"SetCmd", -- set memory
	"ReqCmd", -- get memory
	"RspCmd", -- got memory
}
Memory = {
	"Numerics",
	"Vertexs",
	"Polytopes",
	"Swarms",
	"Textures",
	"Submats",
	"Monmats",
	"Feathers",
	"Arrows",
	"Focals",
	"Pictures",
	"Currents",
	"Indexs",
	"Sizes",
	"Pierces",
	"Coplanes",
	"Copoints",
	"Debugs",
	"Fixeds",
	"Normals",
	"Valids",
}
Atwill = {
	"Atoften", -- hand or finger
	"Atrarely", -- change to enum
	"Atonce", -- just once now
	"Atnever", -- upon request
}
Action = {
	"Transform", -- pierce or display
	"Additive", -- pierce and identify
	"Subtract", -- pierce and identify
}
Select = {
	"Universe", -- entire view
	"Polytope", -- set of planes
	"Triangle", -- single plane
}
Machine = {
	"Idle", -- run no shader
	"Solve", -- run cospace shader
	"Test", -- run test shader
	"Select", -- run pierce shader
	"Move", -- run display shader
	"Roll", -- run display shader
}
Shader = {
	"Contain",
	"Compute",
}
Work = {
	"Picture", -- picture plane normal
	"Surface", -- pierced plane normal
	"Cursor", -- from cursor to pierce
}
Tool = {
	"Translate", -- parallel or perpendicular
	"Rotate", -- around axis or point
}
Ture = {
	"Table",
	"Sides",
}
--HERE Structs
File = {
	{"act","Goal",{},{}},
	{"idx","Int",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true
	}},{}},
	{"loc","New",{["act"]={
		["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true,
		["HubCfg"]=true
	}},{}},
	{"pid","New",{["act"]={
		["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true
	}},{}},
	{"slf","Int",{["act"]={
		["HubCfg"]=true
	}},{}},
	{"str","Str",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true,["HubErr"]=true
	}},{}},
	{"siz","New",{
		["act"]={["ThdThd"]=true
	}},{}},
}
Term0 = {
	{"cff","Num",{},{}},
}
Term1 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{1}},
}
Term2 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{2}},
}
Term3 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{3}},
}
Nomial = {
	{"num0","Int",{},{}},
	{"trm0","Term0",{},"num0"},
	{"num1","Int",{},{}},
	{"trm1","Term1",{},"num1"},
	{"num2","Int",{},{}},
	{"trm2","Term2",{},"num2"},
	{"num3","Int",{},{}},
	{"trm3","Term3",{},"num3"},
}
Ratio = {
	{"num","Nomial",{},{}},
	{"den","Nomial",{},{}},
}
Event = {
	{"tag","State",{},{}},
	{"idx","Int",{},{}},
	{"oth","Int",{},{}},
	{"key","Num",{},{}},
	{"val","Num",{},{}},
    {"upd","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"dly","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"sch","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"flw","Flow",{["tag"]={["Bind"]=true}},{}},
	{"siz","Int",{["tag"]={["Wave"]=true}},{}},
	{"buf","Num",{["tag"]={["Wave"]=true}},"siz"},
	{"num","Int",{["tag"]={["Timer"]=true}},{}},
	{"tot","Int",{["tag"]={["Timer"]=true}},{}},
	{"ids","Int",{["tag"]={["Timer"]=true}},"num"},
	{"req","Int",{["tag"]={["Timer"]=true}},"num"},
	{"rsp","Num",{["tag"]={["Timer"]=true}},"tot"},
	{"wrp","Num",{["tag"]={["Audio"]=true}},{}},
	{"gap","Int",{["tag"]={["Audio"]=true}},{}},
	{"cdt","Int",{["tag"]={["Audio"]=true}},{}},
	{"len","Int",{["tag"]={["Audio"]=true}},{}},
	{"enb","Int",{["tag"]={["Audio"]=true}},{}},
}
Uniform = {
	{"all","Old",{},{16}},
	{"one","Old",{},{16}},
	{"fea","Old",{},{4}},
	{"arw","Old",{},{4}},
	{"foc","Old",{},{4}},
	{"pic","Old",{},{4}},
	{"pol","Int",{},{}}, -- which polytope matrix to use
	{"idx","Int",{},{}}, -- which plane to apply one matrix to
	{"siz","Int",{},{}}, -- how many swarm points there are
	{"pad","Int",{},{}},
}
Numeric = {
	{"vec","Old",{},{4}},
	{"ref","Int",{},{4}},
	{"tex","Int",{},{}},
	{"pad","Int",{},{3}},
}
Vertex = {
	{"vec","Old",{},{4}},
	{"ref","Int",{},{4}},
}
Matrix = {
	{"mat","Old",{},{16}},
}
Vector = {
	{"vec","Old",{},{4}},
}
Pierce = {
	{"fix","Old",{},{4}},
	{"nml","Old",{},{4}},
	{"vld","Int",{},{}},
	{"pad","Int",{},{3}},
}
Client = {
	{"cmd","Command",{},{}},
	{"mem","Memory",{},{}},
	{"siz","Int",{},{}},
	{"idx","Int",{},{}},
	{"fac","Numeric",{["cmd"]={["SetCmd"]=true},["mem"]={["Numerics"]=true}},"siz"},
	{"vtx","Vertex",{["cmd"]={["SetCmd"]=true},["mem"]={["Vertexs"]=true}},"siz"},
	{"pol","Matrix",{["cmd"]={["SetCmd"]=true},["mem"]={["Polytopes"]=true}},"siz"},
	{"swa","Vector",{["cmd"]={["SetCmd"]=true},["mem"]={["Swarms"]=true}},"siz"},
	{"tex","Vector",{["cmd"]={["SetCmd"]=true},["mem"]={["Textures"]=true}},"siz"},
	{"all","Matrix",{["cmd"]={["SetCmd"]=true},["mem"]={["Submats"]=true}},"siz"},
	{"one","Matrix",{["cmd"]={["SetCmd"]=true},["mem"]={["Monmats"]=true}},"siz"},
	{"fea","Vector",{["cmd"]={["SetCmd"]=true},["mem"]={["Feathers"]=true}},"siz"},
	{"arw","Vector",{["cmd"]={["SetCmd"]=true},["mem"]={["Arrows"]=true}},"siz"},
	{"foc","Vector",{["cmd"]={["SetCmd"]=true},["mem"]={["Focals"]=true}},"siz"},
	{"pic","Vector",{["cmd"]={["SetCmd"]=true},["mem"]={["Pictures"]=true}},"siz"},
	{"cur","Int",{["cmd"]={["SetCmd"]=true},["mem"]={["Currents"]=true}},"siz"},
	{"idt","Int",{["cmd"]={["SetCmd"]=true},["mem"]={["Indexs"]=true}},"siz"},
	{"sze","Int",{["cmd"]={["SetCmd"]=true},["mem"]={["Sizes"]=true}},"siz"},
	{"pie","Pierce",{["cmd"]={["RspCmd"]=true},["mem"]={["Pierces"]=true}},"siz"},
	{"cpl","Vector",{["cmd"]={["RspCmd"]=true},["mem"]={["Coplanes"]=true}},"siz"},
	{"cpn","Vector",{["cmd"]={["RspCmd"]=true},["mem"]={["Copoints"]=true}},"siz"},
	{"deb","Vector",{["cmd"]={["RspCmd"]=true},["mem"]={["Debugs"]=true}},"siz"},
	{"atw","Atwill",{["cmd"]={["AtwCmd"]=true}},{}},
	{"act","Action",{["cmd"]={["ActCmd"]=true}},{}},
	{"sel","Select",{["cmd"]={["SelCmd"]=true}},{}},
	{"mch","Machine",{["cmd"]={["MchCmd"]=true}},{}},
	{"sha","Shader",{["cmd"]={["ShaCmd"]=true}},{}},
	{"wrk","Work",{["cmd"]={["HrkCmd"]=true,["FrkCmd"]=true}},{}},
	{"too","Tool",{["cmd"]={["HooCmd"]=true,["FooCmd"]=true}},{}},
}
Sculpt = {
	{"cfg","Ture",{},{}},
}
--HERE
Enums,Enumz = listHere("Enums","type.gen")
Structs,Structz = listHere("Structs","type.gen")
function showTypeC()
	local result = ""
	result = result.."#include \"face.h\"\n"
	result = result.."#include \"type.h\"\n"
	result = result.."#include <stdlib.h>\n"
	result = result.."#include <string.h>\n"
	result = result.."#include <stdio.h>\n"
	result = result.."#include <unistd.h>\n"
	result = result.."#include <sys/errno.h>\n"
	result = result..showCallC()
	return result
end
function showTypeH()
	local result = ""
	result = result.."typedef void (*sftype)(const char*,int,int,void*);\n"
	result = result..showCallH()
	return result
end
function showTypeHs()
	local result = ""
	result = result.."module Type where\n"
	result = result.."--\n"
	result = result.."import Face\n"
	result = result.."import System.Environment\n"
	result = result.."import System.Exit\n"
	result = result.."--\n"
	result = result..showCallHs()
	return result
end
function showTypeLua()
	local result = ""
	result = result.."require \"face\"\n"
	result = result.."--\n"
	result = result..showCallLua()
	return result
end
function showTypeSw()
	local result = ""
	result = result.."import face\n"
	result = result..showCallSw()
	return result
end
if (arg[1] == "type.h") then
	file = io.open("type.h", "w")
	file:write(showTypeH().."\n")
	file:close()
end
if (arg[1] == "type.c") then
	file = io.open("type.c", "w")
	file:write(showTypeC().."\n")
	file:close()
end
if (arg[1] == "type.hs") then
	file = io.open("type.hs", "w")
	file:write(showTypeHs().."\n")
	file:close()
end
if (arg[1] == "type.lua") then
	file = io.open("type.lua", "w")
	file:write(showTypeLua().."\n")
	file:close()
end
if (arg[1] == "type.sw") then
	file = io.open("type.sw", "w")
	file:write(showTypeSw().."\n")
	file:close()
end
