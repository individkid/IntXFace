dofile("type.src")

--HERE Enums
Goal = {
	"NewHub",
	"CfgHub",
	"AppHub",
	"ThdHub",
	"HubThd",
	"AppThd",
	"ThdThd",
	"HubCfg",
	"ThdErr",
	"HubErr",
}
State = {
	"Stock",
	"First",
	"Assign",
	"Bind",
	"Wave",
	"Timer",
	"Audio",
}
Flow = {
	"Sched",
	"Back",
	"Peek",
	"Poke",
	"Store",
	"Load",
}
Request = {
	"SetReq", -- set memory
	"GetReq", -- get memory
	"GotReq", -- response to GetReq
	"UseReq", -- notice that matrix changed
	"FixReq", -- request to revert matrix and change plane
}
Memory = {
	"Trianglez", -- indices of vertices of facet
	"Numericz", -- distances of plane above selected base
	"Vertexz", -- intersection of backlinked planes
	"Swarmz", -- array of points around focal point
	"Texturez", -- memory for textures
	"Basisz", -- base for each dimension
	"Allmatz", -- whole view transformation
	"Fewmatz", -- matrix per set of planes
	"Onematz", -- single face transformation
	"Piercez", -- pierce point normal and valid
	"Slicez", -- plane or point index ranges
	"Stringz", -- keyboard comparison strings
	"Patternz", -- comparison regular expressions
	"Resultz", -- regular expression substrings
	"Machinez", -- state machine lines
	"Configurez", -- configure to value
}
Configure = {
	"TriangleSize", -- refers to corners
	"NumericSize", -- planes for corners
	"VertexSize", -- corners of frame
	"SubjectSize", -- per view matrix
	"ObjectSize", -- per polytope matrix
	"ElementSize", -- per plane matrix
	"SwarmSize", -- early warning system
	"TextureSize", -- how to decorate
	"BasisSize", -- cospace converters
	"SliceSize", -- ranges per draw
	"MachineSize", -- vending machine lines
	"RegisterLine", -- state of machine
	"RegisterNest", -- current level
	"RegisterXform", -- which matrix
	"RegisterMemory", -- which memory
	"RegisterIndex", -- which memory instance
	"RegisterHint", -- argument from graphics
	"RegisterDone", -- shaders running count
	"RegisterOpen", -- windows open count
	"CompareConsole", -- console string index
	"CompareString", -- which compare string
	"ComparePattern", -- which compare pattern
	"CompareNumber", -- string pattern count
	"CompareSize", -- string pattern result
	"CenterRequest", -- fields to from client
	"CenterMemory",
	"CenterSize",
	"CenterIndex",
	"CenterSelf",
	"ArgumentShader", -- pass to draw
	"ArgumentStart",
	"ArgumentStop",
	"ClosestLeft", -- search through pierce
	"ClosestBase",
	"ClosestNear",
	"ClosestFound",
	"UniformAll", -- which subject matrix
	"UniformOne", -- which element matrix
	"UniformLeft", -- pierce point horizontal
	"UniformBase", -- pierce pont vertical
	"UniformIndex", -- manipulate plane select
	"UniformSize", -- early warning points
	"UniformBasis", -- which cospace basis
	"WindowLeft", -- window initialization
	"WindowBase",
	"WindowWide",
	"WindowHigh",
	"CursorLeft", -- user input mouse
	"CursorBase",
	"CursorAngle",
	"CursorClick", -- mouse button
}
Transfer = {
	"Read", -- read internal pipe
	"Write", -- write external pipe
	"Save", -- client, pierce, or info to configure
	"Copy", -- configure to configure
	"Force", -- machine to configure
	"Setup", -- configure to client
	"Alloc", -- configure to client
	"Echo", -- collect to client
	"Clear", -- identity to matrix
	"Invert", -- invert in matrix
	"Manip", -- manip to matrix
	"Follow", -- multiply to matrix
	"Precede", -- multiply by matrix
	"Share", -- dma to cpu or gpu
	"Draw", -- start shader
	"Jump", -- skip if true
	"Yield", -- jump after hint
	"Goto", -- jump if true
	"Nest", -- nest to level
	"Swap", -- exchange machine lines
}
Accumulate = {
	"Compose", -- kernel optimization
	"Maintain", -- kernel checkpoint
	"Written", -- kernel echoed
	"Towrite", -- kernel written
	"OfCenter", -- client memory
}
Transform = {
	"Translate",
	"Rotate",
	"Scale",
	"Zoom",
}
Shader = {
	"Dipoint", -- display from triangles of points
	"Diplane", -- display from triangles of points from planes
	"Adpoint", -- find pierce points from triangles of points
	"Adplane", -- find pierce points from triangles of points from planes
	"Copoint", -- find planes from triangles of points
	"Coplane", -- find points from planes
	"Onpoint", -- fill triangle with plane shared by corners
	"Onplane", -- fill pierce with points on given plane
	"Depoint", -- copy points to pierces
	"Deplane", -- copy planes to pierces
}
Stage = {
	"Corner",
	"Fragment",
}
Wait = {
	"Open",
	"Close",
	"Start",
	"Stop",
}
Concur = {
	"External",
	"Console",
	"Program",
	"Window",
	"Process",
}
Compare = {
	"Less",
	"More",
	"Equal",
	"Nless",
	"Nmore",
	"Nequal",
}
Condition = {
	"Every",
	"None",
	"Both",
	"Eorb",
	"Norb",
}
Ture = {
	"Table",
	"Sides",
}
Step = {
	"FwdSkp",
	"RevSkp",
	"FwdEnt",
	"RevEnt",
	"FwdExt",
	"RevExt",
}
Stream = {
	"RdTypP",
	"RdTypHd",
	"RdTypTl",
	"RdStrP",
	"RdStrHd",
	"RdStrTl",
	"RdRawP",
	"RdRawHd",
	"RdRawTl",
	"RdFldP",
	"RdFldHd",
	"RdFldTl",
	"WrTypP",
	"WrTypHd",
	"WrTypTl",
	"WrStrP",
	"WrStrHd",
	"WrStrTl",
	"WrRawP",
	"WrRawHd",
	"WrRawTl",
	"WrFldP",
	"WrFldHd",
	"WrFldTl",
}
Logic = {
	"WrpJmp",
	"WrpYld",
	"RunJmp",
	"RunYld",
	"ClrVal",
	"ClrJmp",
	"ClrYld",
	"SkpVal",
	"SkpJmp",
	"SkpYld",
	"ImmJmp",
	"ImmYld",
	"SetJmp",
}
--HERE Constants
Initial = {
	{"Shader","Dipoint","Stage","Corner","Str","vertex_render"},
	{"Shader","Dipoint","Stage","Fragment","Str","fragment_render"},
	{"Shader","Diplane","Stage","Corner","Str","diplane_vertex"},
	{"Shader","Diplane","Stage","Fragment","Str","diplane_fragment"},
	{"Shader","Adpoint","Str","kernel_pierce"},
	{"Shader","Adplane","Str","adplane_compute"},
	{"Shader","Copoint","Str","copoint_compute"},
	{"Shader","Coplane","Str","coplane_compute"},
	{"Shader","Onpoint","Str","onpoint_compute"},
	{"Shader","Onplane","Str","onplane_compute"},
	{"Shader","Depoint","Str","depoint_compute"},
	{"Shader","Deplane","Str","deplane_compute"},
}
Bootstrap = {
	{"Int","0","Str","Center(req:Request(SetReq)mem:Memory(Configurez)siz:Int(4)idx:Int(0)slf:Int(0)"..
		"cfg[0]:Configure(WindowWide)"..
		"cfg[1]:Configure(WindowHigh)"..
		"cfg[2]:Configure(MachineSize)"..
		"cfg[3]:Configure(RegisterOpen)"..
		"val[0]:Int(1024)"..
		"val[1]:Int(512)"..
		"val[2]:Int(1)"..
		"val[3]:Int(31)"..
	")"},
	{"Int","1","Str","Center(req:Request(SetReq)mem:Memory(Machinez)siz:Int(1)idx:Int(0)slf:Int(0)"..
		"mch[0]:Machine(xfr:Transfer(Force)siz:Int(1)"..
			"cfg[0]:Configure(RegisterOpen)"..
			"val[0]:Int(0)"..
		")"..
	")"},
}
--HERE Structs
File = {
	{"act","Goal",{},{}},
	{"idx","Int",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true
	}},{}},
	{"loc","New",{["act"]={
		["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true,
		["HubCfg"]=true
	}},{}},
	{"pid","New",{["act"]={
		["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true
	}},{}},
	{"slf","Int",{["act"]={
		["HubCfg"]=true
	}},{}},
	{"str","Str",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true,["HubErr"]=true
	}},{}},
	{"siz","New",{
		["act"]={["ThdThd"]=true
	}},{}},
}
Term0 = {
	{"cff","Num",{},{}},
}
Term1 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{1}},
}
Term2 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{2}},
}
Term3 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{3}},
}
Nomial = {
	{"num0","Int",{},{}},
	{"trm0","Term0",{},"num0"},
	{"num1","Int",{},{}},
	{"trm1","Term1",{},"num1"},
	{"num2","Int",{},{}},
	{"trm2","Term2",{},"num2"},
	{"num3","Int",{},{}},
	{"trm3","Term3",{},"num3"},
}
Ratio = {
	{"num","Nomial",{},{}},
	{"den","Nomial",{},{}},
}
Event = {
	{"tag","State",{},{}},
	{"idx","Int",{},{}},
	{"oth","Int",{},{}},
	{"key","Num",{},{}},
	{"val","Num",{},{}},
    {"upd","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"dly","Ratio",{["tag"]={["Stock"]=true}},{}},
    {"sch","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"flw","Flow",{["tag"]={["Bind"]=true}},{}},
	{"siz","Int",{["tag"]={["Wave"]=true}},{}},
	{"buf","Num",{["tag"]={["Wave"]=true}},"siz"},
	{"num","Int",{["tag"]={["Timer"]=true}},{}},
	{"tot","Int",{["tag"]={["Timer"]=true}},{}},
	{"ids","Int",{["tag"]={["Timer"]=true}},"num"},
	{"req","Int",{["tag"]={["Timer"]=true}},"num"},
	{"rsp","Num",{["tag"]={["Timer"]=true}},"tot"},
	{"wrp","Num",{["tag"]={["Audio"]=true}},{}},
	{"gap","Int",{["tag"]={["Audio"]=true}},{}},
	{"cdt","Int",{["tag"]={["Audio"]=true}},{}},
	{"len","Int",{["tag"]={["Audio"]=true}},{}},
	{"enb","Int",{["tag"]={["Audio"]=true}},{}},
}
Uniform = {
	{"all","Int",{},{}}, -- which subject to use
	{"one","Int",{},{}}, -- which element to use
	{"lon","Int",{},{}}, -- horizontal axis of cursor
	{"lat","Int",{},{}}, -- vertical axis of cursor

	{"lft","Int",{},{}}, -- horizontal axis of window
	{"bas","Int",{},{}}, -- vertical axis of window
	{"wdt","Int",{},{}}, -- horizontal size of window
	{"hdt","Int",{},{}}, -- vertical size of window

	{"idx","Int",{},{}}, -- which plane to apply one matrix to
	{"siz","Int",{},{}}, -- how many swarm points there are
	{"csp","Int",{},{}}, -- which basis to use
	{"tsz","Int",{},{}}, -- size of trinagle buffer

	{"nsz","Int",{},{}}, -- size of numeric buffer
	{"vsz","Int",{},{}}, -- size of vertex buffer
	{"asz","Int",{},{}}, -- size of subject buffer
	{"fsz","Int",{},{}}, -- size of object buffer

	{"osz","Int",{},{}}, -- size of element buffer
	{"ssz","Int",{},{}}, -- size of swarm buffer
	{"xsz","Int",{},{}}, -- size of texture buffer
	{"bsz","Int",{},{}}, -- size of basis buffer
}
Triangle = {
	{"vtx","Int",{},{4}}, -- points of triangle
	{"num","Int",{},{}}, -- plane of points
	{"tex","Int",{},{}}, -- texture of triangle
	{"pol","Int",{},{}}, -- polytope triangle is in
	{"pad","Int",{},{}},
}
Numeric = {
	{"vec","Old",{},{4}}, -- distances above basis
	{"bas","Int",{},{}}, -- basis selector
	{"pad","Int",{},{3}},
}
Vertex = {
	{"vec","Old",{},{4}}, -- intersection of planes
	{"ref","Int",{},{3}}, -- backreference to planes
	{"pad","Int",{},{}},
}
Pierce = {
	{"fix","Old",{},{4}},
	{"nml","Old",{},{4}},
	{"vld","Int",{},{}},
	{"idx","Int",{},{}},
	{"pad","Int",{},{2}},
}
Vector = {
	{"vec","Old",{},{4}},
}
Matrix = {
	{"mat","Old",{},{16}},
}
Basis = {
	{"mat","Old",{},{36}},
}
Slice = {
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
}
Machine = {
	{"xfr","Transfer",{},{}},
	{"siz","Int",{},{}},
	{"cfg","Configure",{["xfr"]={["Save"]=true,["Copy"]=true,["Force"]=true,["Setup"]=true,["Jump"]=true,["Yield"]=true,["Goto"]=true}},"siz"},
	{"oth","Configure",{["xfr"]={["Copy"]=true}},"siz"},
	{"val","Int",{["xfr"]={["Force"]=true,["Setup"]=true,["Jump"]=true,["Yield"]=true,["Goto"]=true}},"siz"},
	{"cmp","Compare",{["xfr"]={["Jump"]=true,["Yield"]=true,["Goto"]=true}},"siz"},
	{"cnd","Condition",{["xfr"]={["Jump"]=true,["Yield"]=true,["Goto"]=true}},{}},
	{"idx","Int",{["xfr"]={["Jump"]=true,["Yield"]=true,["Goto"]=true,["Nest"]=true,["Swap"]=true}},{}},
	{"ret","Int",{["xfr"]={["Swap"]=true}},{}},
	{"src","Accumulate",{["xfr"]={["Follow"]=true,["Precede"]=true}},{}},
	{"dst","Accumulate",{["xfr"]={["Clear"]=true,["Invert"]=true,["Manip"]=true,["Follow"]=true,["Precede"]=true}},{}},
}
Center = {
	{"req","Request",{},{}},
	{"mem","Memory",{},{}},
	{"siz","Int",{},{}},
	{"idx","Int",{},{}},
	{"slf","Int",{},{}},
	{"tri","Triangle",{["mem"]={["Trianglez"]=true}},"siz"},
	{"num","Numeric",{["mem"]={["Numericz"]=true}},"siz"},
	{"vtx","Vertex",{["mem"]={["Vertexz"]=true}},"siz"},
	{"all","Matrix",{["mem"]={["Allmatz"]=true}},"siz"},
	{"few","Matrix",{["mem"]={["Fewmatz"]=true}},"siz"},
	{"one","Matrix",{["mem"]={["Onematz"]=true}},"siz"},
	{"swa","Vector",{["mem"]={["Swarmz"]=true}},"siz"},
	{"tex","Vector",{["mem"]={["Texturez"]=true}},"siz"},
	{"bas","Basis",{["mem"]={["Basisz"]=true}},"siz"},
	{"pie","Pierce",{["mem"]={["Piercez"]=true}},"siz"},
	{"rng","Slice",{["mem"]={["Slicez"]=true}},"siz"},
	{"str","Str",{["mem"]={["Stringz"]=true,["Patternz"]=true,["Resultz"]=true}},"siz"},
	{"mch","Machine",{["mem"]={["Machinez"]=true}},"siz"},
	{"cfg","Configure",{["mem"]={["Configurez"]=true}},"siz"},
	{"val","Int",{["mem"]={["Configurez"]=true}},"siz"},
}
Sculpt = {
	{"cfg","Ture",{},{}},
}
Data = {
	{"siz","Int",{},{}},
	{"lim","Int",{},"siz"},
	{"jmp","Int",{},"siz"},
	{"len","Int",{},{}},
	{"opc","Logic",{},"len"},
	{"dat","Dat",{},{}},
}
--HERE
Enums,Enumz = listHere("Enums","type.gen")
Constants,Constantz = listHere("Constants","type.gen")
Structs,Structz = listHere("Structs","type.gen")
function showTypeC()
	local result = ""
	result = result.."#include \"face.h\"\n"
	result = result.."#include \"type.h\"\n"
	result = result.."#include <stdlib.h>\n"
	result = result.."#include <string.h>\n"
	result = result.."#include <stdio.h>\n"
	result = result.."#include <unistd.h>\n"
	result = result.."#include <sys/errno.h>\n"
	result = result..showCallC()
	return result
end
function showTypeH()
	local result = ""
	result = result.."#include \"proto.h\"\n"
	result = result..showCallH()
	return result
end
function showTypeHs()
	local result = ""
	result = result.."module Type where\n"
	result = result.."--\n"
	result = result.."import Face\n"
	result = result.."import System.Environment\n"
	result = result.."import System.Exit\n"
	result = result.."--\n"
	result = result.."type Dat = Int -- TODO\n"
	result = result..showCallHs()
	return result
end
function showTypeLua()
	local result = ""
	result = result.."require \"face\"\n"
	result = result.."--\n"
	result = result..showCallLua()
	return result
end
function showTypeSw()
	local result = ""
	result = result.."import face\n"
	result = result..showCallSw()
	return result
end
if (arg[1] == "type.dep") then
	file = io.open("type.dep", "w")
	file:close()
end
if (arg[1] == "type.h") then
	file = io.open("type.h", "w")
	file:write(showTypeH().."\n")
	file:close()
end
if (arg[1] == "type.c") then
	file = io.open("type.c", "w")
	file:write(showTypeC().."\n")
	file:close()
end
if (arg[1] == "type.hs") then
	file = io.open("type.hs", "w")
	file:write(showTypeHs().."\n")
	file:close()
end
if (arg[1] == "type.lua") then
	file = io.open("type.lua", "w")
	file:write(showTypeLua().."\n")
	file:close()
end
if (arg[1] == "type.sw") then
	file = io.open("type.sw", "w")
	file:write(showTypeSw().."\n")
	file:close()
end
