dofile("show.lua")

--HERE Enums
Goal = {
	"NewHub", -- open file
	"ThdHub",
	"CfgHub", -- set pid and forward
	"AppHub", -- set pid and forward
	"HubThd", -- lock write forwarded
	"AppThd", -- lock append forwarded
	"ThdThd", -- file change notify
	"HubCfg", -- identify file change
	"ThdErr", -- close and report
	"HubErr", -- report and exit
}
Level = {
	"Stock",
	"First",
	"Assign",
	"Bind",
	"Wave",
	"Timer",
	"Audio",
}
Flow = {
	"Sched",
	"Back",
	"Peek",
	"Poke",
	"Store",
	"Load",
}
Memory = {
	"Trianglez", -- indices of vertices of facet
	"Numericz", -- distances of plane above selected base
	"Vertexz", -- intersection of backlinked planes
	"Basisz", -- base for each dimension
	"Matrixz", -- transformations
	"Uniformz", -- references into arrays
	"Piercez", -- per fragment info
	"Stackz", -- named machine locations
	"Machinez", -- state machine lines
	"Littlez", -- little machine lines
	"Configurez", -- configure to value
}
Configure = {
	"TriangleSize", -- refers to corners
	"TriangleBase", --
	"NumericSize", -- planes for corners
	"NumericBase", --
	"VertexSize", -- corners of frame
	"VertexBase", --
	"MatrixSize", -- multipurpose matrix
	"MatrixBase", --
	"BasisSize", -- cospace converters
	"BasisBase", --
	"StringSize", -- queue of strings
	"MachineSize", -- vending machine lines
	"LittleSize", -- machine size
	"LittleIndex", -- where in machine
	"ParamFollow", -- pass to dma
	"ParamModify", --
	"ParamDisplay", -- pass to draw
	"ParamBright", --
	"ParamDetect", --
	"ParamBase", --
	"ParamLimit", --
	"ManipReact", -- block or behave
	"ManipEnact", -- call and return
	"ManipAction", -- what to do
	"ManipFixed", -- how to do
	"ManipScope", -- what to transform
	"RegisterDone", -- resource missing mask
	"RegisterOpen", -- thread running mask
	"RegisterInit", -- thread testing mask
	"RegisterPlan", -- thread testing plan
	"RegisterPoll", -- poll second thousandths
	"ResultLine", -- state of machine
	"ResultHint", -- argument from graphics
	"ResultType", -- type of eval result
	"CursorRead", -- which cursor read
	"CursorWrite", -- which cursor written
	"CursorIndex", -- manipulate plane select
	"CursorLeft", -- user input mouse
	"CursorBase", --
	"CursorAngle", -- user input roller
	"CursorClick", -- user input button
	"CursorPress", -- user input keyboard
	"WindowRead", -- which window read
	"WindowWrite", -- which window written
	"WindowLeft", -- window position
	"WindowBase", --
	"WindowWidth", -- window size
	"WindowHeight", --
	"MonitorWidth", -- monitor size
	"MonitorHeight", --
	"PhysicalWidth", -- monitor size
	"PhysicalHeight", --
	"ClosestFind", -- whether to search or index
	"ClosestValid", -- search through pierce
	"ClosestIndex", --
	"ClosestPoly", --
	"ClosestLeft", --
	"ClosestBase", --
	"ClosestNear", --
	"NormalLeft", --
	"NormalBase", --
	"NormalNear", --
	"CenterMemory", -- fields to from client
	"CenterSize", --
	"CenterIndex", --
	"CenterSelf", --
}
Transfer = {
	"Read", -- read internal pipe
	"Write", -- write external pipe
	"Stage", -- center fields, pierce, or info to configure
	"Force", -- machine to configure
	"Cont", -- applies inverse of new transformation to local, so the switch to the new transformation is continuous.
	"Prep", -- applies local to to-send, and schedules send.
	"Send", -- applies to-send to sent and writes composition of all but local.
	"Recv", -- either applies part of sent to received, or replaces received and compensates sent such that its delta from received is unchanged.
	"Disp", -- conjoins product of local, to-send, sent, received with window, project, maybe subject, maybe object
	"Copy", -- dma to cpu or gpu
	"Atom", -- call react
	"Name", -- function for call
	"Jump", -- skip if true
	"Goto", -- jump if true
	"Nest", -- nest to level
	"Eval", -- call datxEval
	"Echo", -- copy result to center
	"Hide", -- pop hide and use
}
Plan = { -- which test to run
	"Regress",
	"Bringup",
	"Builtin",
	"Release",
}
Interp = { -- configure enum interpretation
	"Infect", -- changed by callback
	"Affect", -- changed infrequently
	"Effect", -- used for display
}
React = { -- when updates recorded
	"Enstate", -- whether to little language
	"Enque", -- whether to micro code
	"Enline", -- whether to enque key
	"Enchar", -- whether to save key
	"Arrow", -- whether arrow adjusts window
	"Drag", -- whether mouse adjusts window
	"North", -- window edge changed
	"East",
	"South",
	"West",
	"Relate", -- whether mouse absolute
}
Enact = { -- when updates applied
	"Extent", -- set window and swap on wake
	"Follow", -- set window matrix on wake
	"Modify", -- set transform matrix on wake
	"Direct", -- set uniform fields on wake
	"Defer", -- set memory from dma center
	"Display", -- start display shader on wake
	"Bright", -- start facet index shader on wake
	"Detect", -- start pierce point shader on wake
	"Query", -- capture pierce point on wake
}
Action = { -- what input does
	"Indicate", -- move to new piere point
	"Collect", -- identify subpolytope
	"Manipulate", -- apply transformation
	"Refine", -- add boundaries
	"Additive", -- add regions
	"Subtractive", -- remove regions
}
Fixed = { -- how motion interpreted
	"Mouse", -- how many fixed
	"Roller",
	"Slide", -- how changed
	"Rotate",
	"Scale",
	"Cursor", -- what fixed
	"Focal",
	"Ortho",
	"Normal",
}
MicroIn = {
	"Practice", -- use location for Vertex
	"Concept", -- use binding for Vertex
}
MicroMid = {
	"Raster", -- transform point
	"CoPoint", -- compute plane
	"Coplane", -- compute point 
}
MicroOut = {
	"DisPlay", -- produce color
	"Compute", -- produce pierce point
	"Discard", -- no fragment shader
}
MicroOn = {
	"Caryon", -- dispatch and forget
	"CoPyon", -- copy after done
}
Micro = {
	"MicroPRPC", -- fetch transform display
	"MicroPRCP", -- fetch transform pierce
	"MicroCRPC", -- index transform display
	"MicroCRCP", -- index transform pierce
	"MicroCPDP", -- index construct planes
	"MicroCCDP", -- index intersect points
}
WrapTag = {
	"FetchBuf",
	"ChangeBuf",
	"StoreBuf", 
	"QueryBuf",
	"DrawBuf",
	"SwapBuf",
}
Phase = {
	"Init",
	"Start",
	"Stop",
}
Thread = {
	"Select",
	"Console",
	"Initial",
	"Window",
	"Graphics",
	"Process",
}
Emerg = {
	"Planes", -- Scalar -- [Plane] -- per boundary
	"Halfs", -- Nested -- Space -- per boundary
	"Coins", -- Listed -- [[Boundary]] -- per vertex
	"Points", -- Scalar -- [Point] -- per vertex
	"Facets", -- Listed -- [[Vertex]] -- per facet vertex triplets
	"Subsets", -- Int -- [Region] -- in context of space
}
Valid = {
	"Toread", -- request for response
	"Toresp", -- response to request
	"Towrite", -- overwrite given element
	"Toadd", -- additively change
	"Tosub", -- subtractively change
}
Stream = {
	"Fanout", -- write from readable pipe round robin to one of several pipes
	"Combine", -- write to pipe from expression if any of several expression values change
	"Buffer", -- set expression value from pipe
	"Execute", -- start a filter between the last and next pipe
}
Operate = {
	"AddOp",
	"SubOp",
	"MulOp",
	"DivOp",
	"RemOp",
	"CndOp", -- switch on het
	"TotOp", -- cast to type
	"GetOp", -- value from callback
	"SetOp", -- callback with value
	"ValOp", -- value from lookup
	"SavOp", -- value for lookup
	"OptOp", -- cache result
	"RexOp", -- regex sugar
	"IrxOp", -- irrex sugar
	"CmpOp", -- compile for map
	"DatOp", -- memset Dat
	"PopOp",
	"PutOp",
	"OutOp",
	"FldOp", -- fields to struct
	"ExtOp", -- fields from struct
	"PrmOp", -- permute list
	"LstOp", -- join lists
	"HetOp", -- expression list
	"HomOp", -- expression list
	"EmmOp", -- hetgen sugar
	"OmmOp", -- homgen sugar
	"ImmOp", -- built in value
	"IntOp", -- ImmOp sugar
	"StrOp", -- ImmOp sugar
	"CfgOp", -- ImmOp sugar
	"MemOp", -- ImmOp sugar
	"UnqOp", -- magic number
	"NamOp", -- call function
	"AccOp", -- machine result
}
Compare = {
	-- Less Equal More
	-- Open Closed
	"LOCmp",
	"LCCmp",
	"EOCmp",
	"ECCmp",
	"MOCmp",
	"MCCmp",
	"ReCmp", -- regular expression
	"IrCmp", -- irregular expression
}
Order = {
	"ChrOrd",
	"PreOrd",
	"PostOrd",
	"PermOrd",
	"ForkOrd",
	"BeginOrd",
}
Access = {
	"GetAcc",
	"SetAcc",
	"GlnAcc",
	"SlnAcc",
}
Program = {
	"Filez",
	"Holez",
	"Linez",
	"Planez",
	"Spacez",
	"Pagez",
	"Pipez",
	"Framez",
	"Wavez",
	"Tapez",
	"Phonez",
}
--HERE Constants
Component = {
	{"Micro","MicroPRPC","MicroIn","Practice"},
	{"Micro","MicroPRCP","MicroIn","Practice"},
	{"Micro","MicroCRPC","MicroIn","Concept"},
	{"Micro","MicroCRCP","MicroIn","Concept"},
	{"Micro","MicroCPDP","MicroIn","Concept"},
	{"Micro","MicroCCDP","MicroIn","Concept"},
	{"Micro","MicroPRPC","MicroMid","Raster"},
	{"Micro","MicroPRCP","MicroMid","Raster"},
	{"Micro","MicroCRPC","MicroMid","Raster"},
	{"Micro","MicroCRCP","MicroMid","Raster"},
	{"Micro","MicroCPDP","MicroMid","CoPoint"},
	{"Micro","MicroCCDP","MicroMid","Coplane"},
	{"Micro","MicroPRPC","MicroOut","DisPlay"},
	{"Micro","MicroPRCP","MicroOut","Compute"},
	{"Micro","MicroCRPC","MicroOut","DisPlay"},
	{"Micro","MicroCRCP","MicroOut","Compute"},
	{"Micro","MicroCPDP","MicroOut","Discard"},
	{"Micro","MicroCCDP","MicroOut","Discard"},
	{"Micro","MicroPRPC","MicroOn","Caryon"},
	{"Micro","MicroPRCP","MicroOn","CoPyon"},
	{"Micro","MicroCRPC","MicroOn","Caryon"},
	{"Micro","MicroCRCP","MicroOn","CoPyon"},
	{"Micro","MicroCPDP","MicroOn","CoPyon"},
	{"Micro","MicroCCDP","MicroOn","CoPyon"},
}
VertexG = {
	{"Micro","MicroPRPC","Str","vertexPracticeG"},
	{"Micro","MicroPRCP","Str","vertexPracticeG"},
	{"Micro","MicroCRPC","Str","vertexRasterG"},
	{"Micro","MicroCRCP","Str","vertexRasterG"},
	{"Micro","MicroCPDP","Str","vertexCopointG"},
	{"Micro","MicroCCDP","Str","vertexCoplaneG"},
}
FragmentG = {
	{"Micro","MicroPRPC","Str","fragmentDisplayG"},
	{"Micro","MicroPRCP","Str","fragmentComputeG"},
	{"Micro","MicroCRPC","Str","fragmentDisplayG"},
	{"Micro","MicroCRCP","Str","fragmentComputeG"},
	{"Micro","MicroCPDP","Str","fragmentDiscardG"},
	{"Micro","MicroCCDP","Str","fragmentDiscardG"},
}
TypeQ = {
	{"Memory","Trianglez","WrapTag","StoreBuf"},
	{"Memory","Numericz","WrapTag","StoreBuf"},
	{"Memory","Vertexz","WrapTag","FetchBuf"},
	{"Memory","Basisz","WrapTag","StoreBuf"},
	{"Memory","Matrixz","WrapTag","StoreBuf"},
	{"Memory","Uniformz","WrapTag","ChangeBuf"},
	{"Memory","Piercez","WrapTag","QueryBuf"},
	{"Memory","Stackz","WrapTag","WrapTags"},
	{"Memory","Machinez","WrapTag","WrapTags"},
	{"Memory","Littlez","WrapTag","WrapTags"},
	{"Memory","Configurez","WrapTag","WrapTags"},
}
BindQ = {
	{"Micro","MicroPRPC","Int","0","Memory","Vertexz"},
	{"Micro","MicroPRPC","Int","1","Memory","Matrixz"},
	{"Micro","MicroPRPC","Int","2","Memory","Memorys"},
	{"Micro","MicroPRCP","Int","0","Memory","Memorys"},
	{"Micro","MicroCRPC","Int","0","Memory","Memorys"},
	{"Micro","MicroCRCP","Int","0","Memory","Memorys"},
	{"Micro","MicroCPDP","Int","0","Memory","Memorys"},
	{"Micro","MicroCCDP","Int","0","Memory","Memorys"},
}
QueryQ = {
	{"Micro","MicroPRPC","Int","0","Memory","Memorys"},
	{"Micro","MicroPRCP","Int","0","Memory","Piercez"},
	{"Micro","MicroPRCP","Int","1","Memory","Memorys"},
	{"Micro","MicroCRPC","Int","0","Memory","Memorys"},
	{"Micro","MicroCRCP","Int","0","Memory","Piercez"},
	{"Micro","MicroCRCP","Int","1","Memory","Memorys"},
	{"Micro","MicroCPDP","Int","0","Memory","Memorys"},
	{"Micro","MicroCCDP","Int","0","Memory","Memorys"},
}
Bootstrap = {
	{"Int","0","Str","Force(num:5".. -- assign to configuration
		"cfg[0]:WindowWide"..
		"cfg[1]:WindowHigh"..
		"cfg[2]:MachineSize"..
		"cfg[3]:RegisterOpen"..
		"cfg[4]:ParamMicro"..
		"val[0]:1024"..
		"val[1]:512"..
		"val[2]:20"..
		"val[3]:63"..
		"val[4]:Int(%(return castMicro(\"MicroCRPC\"))))"},
	{"Int","1","Str","Eval(SavOp(kys:Str(Changed)sav[0]:IntOp(0)))"}, -- assign to variable
	{"Int","2","Str","Eval(".. -- assign machine to accumulator
		"exp[0]:ImmOp(CenterTag(center[0]:Machinez(siz:14idx:0slf:0"..
		"mch[0]:Goto(CndOp(CondExp(len:3siz:10"..
			"typ[0]:Str(Int)typ[1]:Str(Int)typ[2]:Str(Str)"..
			"cmp[0]:Compare(ECCmp)cmp[1]:Compare(ECCmp)cmp[2]:Compare(ReCmp)"..
			"var[0]:GetOp(ResultHint)"..
			"var[1]:ValOp(Str(Changed))"..
			"var[2]:DupOp(dup[0]:IntOp(-1)dup[1]:IntOp(2)dup[2]:IntOp(-2))"..
			"dom[0]:Domain(len:1val[0]:CfgOp(CenterMemory))"..
			"dom[1]:Domain(len:2val[0]:CfgOp(ResultHint)val[1]:IntOp(1))"..
			"dom[2]:Domain(len:1val[0]:CfgOp(ResultHint))"..
			"dom[3]:Domain(len:1val[0]:CfgOp(CursorLeft))"..
			"dom[4]:Domain(len:1val[0]:CfgOp(CursorAngle))"..
			"dom[5]:Domain(len:1val[0]:CfgOp(CursorClick))"..
			-- Additive/Subtractive/Refine/Transform/Mode(
			-- Mouse(Rotate(Ortho/Focal/Normal)/Translate(Ortho/Focal/Normal)/Scale(Ortho/Focal/Normal))/
			-- Roller(Rotate(Ortho/Focal/Normal)/Translate(Ortho/Focal/Normal)/Scale(Ortho/Focal/Normal)))
			"dom[6]:Domain(len:3val[0]:CfgOp(RegisterString)val[1]:ValOp(Str(Changed))val[2]:IrxOp(Str(=|Mm^|Mm^|Rr^|Oo^)))"..
			"dom[7]:Domain(len:3val[0]:CfgOp(RegisterString)val[1]:ValOp(Str(Changed))val[2]:IrxOp(Str(>|Mm^|Mm^|Rr^|Oo^)))"..
			"dom[8]:Domain(len:1val[0]:CfgOp(RegisterString))"..
			"dom[9]:Domain(len:0)"..
			"rng[0]:NamOp(Str(ReadCenter))"..
			"rng[1]:NamOp(Str(DrawChanged))"..
			"rng[2]:IntOp(0)".. -- Draw not Changed
			"rng[3]:IntOp(0)".. -- Move
			"rng[4]:IntOp(0)".. -- Roll
			"rng[5]:IntOp(0)".. -- Click
			"rng[6]:IntOp(0)".. -- Keyboard
			"rng[7]:IntOp(0)".. -- Keyboard prefix
			"rng[8]:IntOp(0)".. -- Keyboard error
			"rng[9]:IntOp(0))))"..
		"mch[1]:Name(Str(DrawChanged))".. -- Draw, and remember that not Changed
		"mch[2]:Draw()".. -- pass Param configurations
		"mch[3]:Eval(SavOp(kys:Str(Changed)sav[0]:IntOp(0)))"..
		"mch[4]:Eval(IntOp(0))"..
		"mch[5]:Name(Str(ReadCenter))".. -- Read center, Stage center, compare center
		"mch[6]:Read()".. -- read to center
		"mch[7]:Stage(siz:3".. -- copy to configuration
			"sav[0]:RegisterMemory"..
			"sav[1]:RegisterIndex"..
			"sav[2]:CenterSize)"..
		"mch[8]:Eval(CndOp(CondExp(len:2siz:2"..
			"typ[0]:Str(Int)typ[1]:Str(Int)"..
			"cmp[0]:Compare(ECCmp)cmp[1]:Compare(ECCmp)"..
			"var[0]:GetOp(CenterSize)"..
			"var[1]:GetOp(RegisterMemory)"..
			"dom[0]:Domain(len:2val[0]:IntOp(0)val[1]:GetOp(RegisterMemory))"..
			"dom[1]:Domain(len:1val[0]:GetOp(CenterSize))"..
			"rng[0]:IntOp(0)"..
			"rng[1]:NamOp(Str(SetMemory)))))"..
		"mch[9]:Name(Str(SetMemory))".. -- Copy center to cpu and gpu, and remember that Changed
		"mch[10]:Copy()".. -- copy from center to memory
		"mch[11]:Eval(SavOp(kys:Str(Changed)sav[0]:IntOp(1)))"..
		"mch[12]:Eval(IntOp(0))"..
		"mch[13]:Name(Str(Return))))))"},
	{"Int","3","Str","Echo()"}, -- copy from accumulator to center
	{"Int","4","Str","Copy()"}, -- copy from center to machine
}
Execname = {
	{"Program","Filez","Str","./file"},
	{"Program","Holez","Str","./hole"},
	{"Program","Linez","Str","./line"},
	{"Program","Planez","Str","./plane"},
	{"Program","Spacez","Str","./space"},
	{"Program","Pagez","Str","./page"},
	{"Program","Pipez","Str","./pipe"},
	{"Program","Framez","Str","./frame"},
	{"Program","Wavez","Str","./wave"},
	{"Program","Tapez","Str","./tape"},
	{"Program","Phonez","Str","./phone"},
}
--HERE Structs
Persist = {
	{"act","Goal",{},{}},
	{"idx","Int",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true
	}},{}}, -- identifier for file
	{"loc","New",{["act"]={
		["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true,
		["HubCfg"]=true
	}},{}}, -- location in file
	{"pid","New",{["act"]={
		["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true
	}},{}}, -- process id for fifo
	{"slf","Int",{["act"]={
		["HubCfg"]=true
	}},{}}, -- whether process id is self
	{"str","Str",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true,["HubErr"]=true
	}},{}}, -- file or field
}
Term0 = {
	{"cff","Num",{},{}},
}
Term1 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{1}},
}
Term2 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{2}},
}
Term3 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{3}},
}
Nomial = {
	{"num0","Int",{},{}},
	{"trm0","Term0",{},"num0"},
	{"num1","Int",{},{}},
	{"trm1","Term1",{},"num1"},
	{"num2","Int",{},{}},
	{"trm2","Term2",{},"num2"},
	{"num3","Int",{},{}},
	{"trm3","Term3",{},"num3"},
}
Ratio = {
	{"num","Nomial",{},{}},
	{"den","Nomial",{},{}},
}
Event = { -- for line process
	{"tag","Level",{},{}},
	{"idx","Int",{},{}},
	{"oth","Int",{},{}},
	{"key","Num",{},{}},
	{"val","Num",{},{}},
	{"upd","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"dly","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"sch","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"flw","Flow",{["tag"]={["Bind"]=true}},{}},
	{"siz","Int",{["tag"]={["Wave"]=true}},{}},
	{"buf","Num",{["tag"]={["Wave"]=true}},"siz"},
	{"num","Int",{["tag"]={["Timer"]=true}},{}},
	{"tot","Int",{["tag"]={["Timer"]=true}},{}},
	{"ids","Int",{["tag"]={["Timer"]=true}},"num"},
	{"req","Int",{["tag"]={["Timer"]=true}},"num"},
	{"rsp","Num",{["tag"]={["Timer"]=true}},"tot"},
	{"wrp","Num",{["tag"]={["Audio"]=true}},{}},
	{"gap","Int",{["tag"]={["Audio"]=true}},{}},
	{"cdt","Int",{["tag"]={["Audio"]=true}},{}},
	{"len","Int",{["tag"]={["Audio"]=true}},{}},
	{"enb","Int",{["tag"]={["Audio"]=true}},{}},
}
Uniform = {
	{"all","Int32",{},{}}, -- which subject to use
	{"one","Int32",{},{}}, -- which element to use
	{"pro","Int32",{},{}}, -- which projection to use
	{"win","Int32",{},{}}, -- which window to use

	{"lon","Int32",{},{}}, -- horizontal axis of cursor
	{"lat","Int32",{},{}}, -- vertical axis of cursor
	{"idx","Int32",{},{}}, -- which plane to manipulate
	{"use","Int32",{},{}}, -- which basis to use

	{"tri","Int32",{},{}}, -- base of triangles
	{"num","Int32",{},{}}, -- base of numerics
	{"vtx","Int32",{},{}}, -- base of vertices
	{"mat","Int32",{},{}}, -- base of matrices
}
Triangle = {
	{"vtx","Int32",{},{4}}, -- points of triangle
	{"num","Int32",{},{}}, -- plane of points
	{"pol","Int32",{},{}}, -- polytope triangle is in
	{"tex","Int32",{},{}}, -- texture selector
	{"rot","Int32",{},{}}, -- texture rotation
}
Numeric = {
	{"vec","Old",{},{4}}, -- distances above basis
	{"bas","Int32",{},{}}, -- basis selector
	{"pad","Int32",{},{3}},
}
Vertex = {
	{"vec","Old",{},{4}}, -- intersection of planes
	{"ref","Int32",{},{4}}, -- backreference to planes
}
Vector = {
	{"vec","Old",{},{4}},
}
Matrix = {
	{"mat","Old",{},{16}},
}
Basis = {
	{"mat","Old",{},{36}},
}
Pierce = {
	{"pnt","Old",{},{3}},
	{"idx","Int32",{},{}},
}
Domain = {
	{"len","Int",{},{}},
	{"val","Express",{},"len"},
}
CondExp = {
	{"len","Int",{},{}},
	{"siz","Int",{},{}},
	{"typ","Str",{},"len"},
	{"cmp","Compare",{},"len"},
	{"var","Express",{},"len"},
	{"dom","Domain",{},"siz"},
	{"rng","Express",{},"siz"},
}
OptExp = {
	{"vld","Int",{},{}},
	{"exp","Express",{["vld"]={["0"]=true}},1},
	{"typ","Int",{["vld"]={["1"]=true}},{}},
	{"dat","Dat",{["vld"]={["1"]=true}},{}},
}
Hetgen = {
	{"siz","Int",{},{}},
	{"gen","Generic",{},"siz"},
}
Irrex = { -- permutation of permutations
	-- prm of zero is always valid
	-- advance top level prm first, otherwise
	-- reset top level and advence next level down
	{"str","Str",{},{}}, -- stateful evaluation
	{"prm","Int",{},{}}, -- stateful evaluation
	{"msk","Int",{},{}}, -- stateful evaluation
	{"ord","Order",{},{}}, -- type of comparison
	{"siz","Int",{},{}}, -- zero for ChrOrd
	{"sub","Irrex",{},"siz"},
}
Datex = { -- given index, return vector
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
	{"dim","Int",{},{}},
	{"min","Int",{},"dim"},
	{"max","Int",{},"dim"},
	{"fsz","Int",{},{}},
	{"rsz","Int",{},{}},
	{"fwd","Int",{},"fsz"},
	{"rev","Int",{},"rsz"},
}
Express = {
	{"opr","Operate",{},""},
	{"opb","Express",{["opr"]={["AddOp"]=true,["SubOp"]=true,["MulOp"]=true,["DivOp"]=true,["RemOp"]=true}},2},
	{"cnd","CondExp",{["opr"]={["CndOp"]=true}},1},
	{"typ","Str",{["opr"]={["TotOp"]=true}},{}},
	{"tot","Express",{["opr"]={["TotOp"]=true}},1},
	{"cfg","Configure",{["opr"]={["GetOp"]=true}},{}},
	{"cgs","Configure",{["opr"]={["SetOp"]=true}},{}},
	{"set","Express",{["opr"]={["SetOp"]=true}},1},
	{"key","Str",{["opr"]={["ValOp"]=true}},{}},
	{"kys","Str",{["opr"]={["SavOp"]=true}},{}},
	{"sav","Express",{["opr"]={["SavOp"]=true}},1},
	{"opt","OptExp",{["opr"]={["OptOp"]=true}},1},
	{"rex","Str",{["opr"]={["RexOp"]=true}},{}},
	{"irx","Str",{["opr"]={["IrxOp"]=true}},{}},
	{"csz","Int",{["opr"]={["CmpOp"]=true}},{}},
	{"cmp","Express",{["opr"]={["CmpOp"]=true}},1},
	{"dsz","Int",{["opr"]={["DatOp"]=true}},{}},
	{"dvl","Int",{["opr"]={["DatOp"]=true}},{}},
	{"put","Express",{["opr"]={["OutOp"]=true}},1}, -- str:Str :Dat
	{"out","Express",{["opr"]={["OutOp"]=true}},1}, -- str:Str :Dat
	{"fld","Express",{["opr"]={["FldOp"]=true}},4}, -- giv:Gen val:Het str:Hom idx:Hom :Gen
	{"ext","Express",{["opr"]={["ExtOp"]=true}},3},
	{"prm","Express",{["opr"]={["PrmOp"]=true}},2},
	{"lst","Express",{["opr"]={["LstOp"]=true}},2},
	{"siz","Int",{["opr"]={["HetOp"]=true,["HomOp"]=true}},{}},
	{"exp","Express",{["opr"]={["HetOp"]=true,["HomOp"]=true}},"siz"},
	{"het","Hetgen",{["opr"]={["EmmOp"]=true}},1},
	{"hom","Homgen",{["opr"]={["OmmOp"]=true}},1},
	{"val","Generic",{["opr"]={["ImmOp"]=true}},1},
	{"ivl","Int",{["opr"]={["IntOp"]=true}},{}},
	{"svl","Str",{["opr"]={["StrOp"]=true}},{}},
	{"cvl","Configure",{["opr"]={["CfgOp"]=true}},{}},
	{"mvl","Memory",{["opr"]={["MemOp"]=true}},{}},
	{"nam","Str",{["opr"]={["NamOp"]=true}},{}},
}
Machine = {
	{"xfr","Transfer",{},""},
	{"siz","Int",{["xfr"]={["Stage"]=true}},{}},
	{"sav","Configure",{["xfr"]={["Stage"]=true}},"siz"},
	{"num","Int",{["xfr"]={["Force"]=true}},{}},
	{"cfg","Configure",{["xfr"]={["Force"]=true}},"num"},
	{"val","Int",{["xfr"]={["Force"]=true}},"num"},
	{"exp","Express",{["xfr"]={["Jump"]=true,["Goto"]=true,["Eval"]=true}},1},
	{"arg","Configure",{["xfr"]={["Atom"]=true}},{}},
	{"lvl","Int",{["xfr"]={["Nest"]=true}},{}},
	{"str","Str",{["xfr"]={["Name"]=true}},{}},
}
Little = {
	{"pat","Int",{},{}},
	{"val","Int",{},{}},
	{"num","Int",{},{}},
	{"nxt","Int",{},{}},
}
Center = {
	{"mem","Memory",{},""},
	{"siz","Int",{},{}},
	{"idx","Int",{},{}},
	{"slf","Int",{},{}},
	{"tri","Triangle",{["mem"]={["Trianglez"]=true}},"siz"},
	{"num","Numeric",{["mem"]={["Numericz"]=true}},"siz"},
	{"vtx","Vertex",{["mem"]={["Vertexz"]=true}},"siz"},
	{"mat","Matrix",{["mem"]={["Matrixz"]=true}},"siz"},
	{"bas","Basis",{["mem"]={["Basisz"]=true}},"siz"},
	{"str","Str",{["mem"]={["Stackz"]=true}},"siz"},
	{"mch","Machine",{["mem"]={["Machinez"]=true}},"siz"},
	{"pvn","Little",{["mem"]={["Littlez"]=true}},"siz"},
	{"cfg","Configure",{["mem"]={["Configurez"]=true}},"siz"},
	{"val","Int",{["mem"]={["Configurez"]=true}},"siz"},
}
Listed = {
	{"siz","Int",{},{}},
	{"idx","Int",{},"siz"},
}
Nested = {
	{"siz","Int",{},{}},
	{"lst","Listed",{},"siz"},
}
Scalar = {
	{"num","Old",{},3},
}
Change = {
	{"cfg","Emerg",{},{}},
	{"vld","Valid",{},{}},
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
	{"vec","Scalar",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Planes"]=true}},"siz"},
	{"nst","Nested",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Halfs"]=true,}},"siz"},
	{"lst","Listed",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Coins"]=true}},"siz"},
	{"num","Int",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Subsets"]=true}},"siz"},
	{"pnt","Scalar",{["vld"]={["Toread"]=true},["cfg"]={["Points"]=true}},"siz"},
	{"fct","Listed",{["vld"]={["Toread"]=true},["cfg"]={["Facets"]=true}},"siz"},
}
Argument = {
	{"typ","Program",{},""},
	{"inp","Int",{},{}},
	{"out","Int",{},{}},
	{"idx","Int",{},{}},
	{"str","Str",{["typ"]={["Holez"]=true}},{}},
}
Valve = {
	{"tag","Stream",{},""},
	{"siz","Int",{["tag"]={["Fanout"]=true}},{}},
	{"dst","Str",{["tag"]={["Fanout"]=true}},"siz"},
	{"typ","Str",{["tag"]={["Fanout"]=true,["Buffer"]=true,["Execute"]=true}},{}},
	{"str","Str",{["tag"]={["Fanout"]=true,["Buffer"]=true}},{}},
	{"url","Str",{["tag"]={["Execute"]=true}},{}},
	{"arg","Argument",{["tag"]={["Execute"]=true}},1},
	{"exp","Express",{["tag"]={["Combine"]=true}},1},
	{"num","Int",{["tag"]={["Combine"]=true}},{}},
	{"dep","Str",{["tag"]={["Combine"]=true}},"num"},
}
--HERE
-- below for depend.lua
Wrap = {
}
Union = {
}
Subtype = {
}
Field = {
}
Type = {
}
-- above for depend.lua
Enums,Enumz = listHere("Enums","type.gen")
Constants,Constantz = listHere("Constants","type.gen")
Structs,Structz = listHere("Structs","type.gen")
homgen = homgenStruct(Structz,Enumz,"Tag");
enum = genericEnum(Structz,Enumz,"Tag");
struct = genericStruct(Structz,Enumz,"Tag");
Enums[#Enums+1] = "Tag"; Enumz["Tag"] = enum
Structs[#Structs+1] = "Generic"; Structz["Generic"] = struct
Structs[#Structs+1] = "Homgen"; Structz["Homgen"] = homgen
function showTypeC(args)
	local result = ""
	result = result.."#include \"face.h\"\n"
	result = result.."#include \"type.h\"\n"
	result = result.."#include <stdlib.h>\n"
	result = result.."#include <string.h>\n"
	result = result.."#include <stdio.h>\n"
	result = result.."#include <unistd.h>\n"
	result = result.."#include <sys/errno.h>\n"
	result = result..showCallC(args).."\n"
	if (not args or args["execWrap"]) then
	result = result.."int execWrap(struct Argument *arg, const char *fork, const char *exec) {\n"
	result = result..showIndent(1).."int idx = openFork();\n"
	result = result..showIndent(1).."if (idx < 0) return -1;\n"
	result = result..showIndent(1).."if (openCheck(idx) >= 0) {\n"
	result = result..showIndent(2).."char *str = 0;\n"
	result = result..showIndent(2).."arg->inp=openRdfd(idx); arg->out=openWrfd(idx);\n"
	result = result..showIndent(2).."showArgument(arg,&str);\n"
	result = result..showIndent(2).."openExec(exec,str); fprintf(stderr,\"%s: cannot execute file: %s\\n\",fork,exec); ERROR();}\n"
	result = result..showIndent(1).."return idx;}\n" end
	if (not args or args["typeWrap"]) then
	result = result.."int typeWrap(enum Program typ, const char *fork, const char *exec) {\n"
	result = result..showIndent(1).."struct Argument arg = {0};\n"
	result = result..showIndent(1).."arg.typ = typ;\n"
	result = result..showIndent(1).."return execWrap(&arg,fork,exec);}\n" end
	if (not args or args["initWrap"]) then
	result = result.."int initWrap(struct Argument *arg, const char *str) {\n"
	result = result..showIndent(1).."int len = 0;\n"
	result = result..showIndent(1).."if (!hideArgument(arg,str,&len)) return -1;\n"
	result = result..showIndent(1).."arg->idx = rdwrInit(arg->inp,arg->out);\n"
	result = result..showIndent(1).."return 0;}\n" end
	if (not args or args["identWrap"]) then
	result = result.."int identWrap(enum Program typ, const char *str) {\n"
	result = result..showIndent(1).."struct Argument arg = {0};\n"
	result = result..showIndent(1).."if (initWrap(&arg,str) < 0 || arg.typ != typ) return -1;\n"
	result = result..showIndent(1).."return arg.idx;}" end
	return result
end
function showTypeH()
	local result = ""
	result = result.."#include \"proto.h\"\n"
	result = result..showCallH().."\n"
	result = result.."int execWrap(struct Argument *arg, const char *fork, const char *exec);\n"
	result = result.."int typeWrap(enum Program typ, const char *fork, const char *exec);\n"
	result = result.."int initWrap(struct Argument *arg, const char *str);"
	result = result.."int identWrap(enum Program typ, const char *str);\n"
	return result
end
function showTypeHs(args)
	local result = ""
	result = result.."module Type where\n"
	result = result.."--\n"
	result = result.."import Face\n"
	result = result.."import System.Environment\n"
	result = result.."import System.IO\n"
	result = result.."import Data.IORef\n"
	result = result.."import Data.Int\n"
	result = result.."import Foreign.C.Types\n"
	result = result.."--\n"
	result = result.."type Dat = [CChar]\n"
	result = result..showCallHs(arg).."\n"
	if (not args or args["Wrap"]) then
	result = result.."execWrap :: Argument -> String -> String -> IO (Maybe Int)\n"
	result = result.."execWrap (Argument (ArgumentA1 typ _ _ idx) arg) fork exec = do\n"
	result = result..showIndent(1).."idx <- openFork\n"
	result = result..showIndent(1).."if idx < 0 then return Nothing else do\n"
	result = result..showIndent(2).."vld <- openCheck idx\n"
	result = result..showIndent(2).."if vld < 0 then return (Just idx) else do\n"
	result = result..showIndent(3).."inp <- openRdfd idx\n"
	result = result..showIndent(3).."out <- openWrfd idx\n"
	result = result..showIndent(3).."ptr <- newIORef \"\"\n"
	result = result..showIndent(3).."showArgument (Argument (ArgumentA1 typ inp out idx) arg) ptr\n"
	result = result..showIndent(3).."str <- readIORef ptr\n"
	result = result..showIndent(3).."openExec exec str\n"
	result = result..showIndent(3).."hPutStrLn stderr (fork ++ \": cannot execute file: \" ++ exec)\n"
	result = result..showIndent(3).."callExit (negate 1)\n"
	result = result..showIndent(3).."return Nothing\n"
	result = result.."typeWrap :: Program -> String -> String -> IO (Maybe Int)\n"
	result = result.."typeWrap typ fork exec = execWrap (Argument (ArgumentA1 typ 0 0 0) ArgumentA5Bs) fork exec\n"
	result = result.."initWrapF :: Maybe Argument -> IO (Maybe Argument)\n"
	result = result.."initWrapF Nothing = return Nothing\n"
	result = result.."initWrapF (Just (Argument (ArgumentA1 typ inp out _) arg)) = do\n"
	result = result..showIndent(1).."idx <- rdwrInit inp out\n"
	result = result..showIndent(1).."return (Just (Argument (ArgumentA1 typ inp out idx) arg))\n"
	result = result.."initWrap :: String -> IO (Maybe Argument)\n"
	result = result.."initWrap str = newIORef str >>= hideArgument >>= initWrapF\n"
	result = result.."identWrapF :: Program -> Maybe Argument -> IO (Maybe Int)\n"
	result = result.."identWrapF _ Nothing = return Nothing\n"
	result = result.."identWrapF cmp (Just (Argument (ArgumentA1 typ _ _ idx) _)) =\n"
	result = result..showIndent(1).."if cmp /= typ then\n"
	result = result..showIndent(1).."return Nothing else\n"
	result = result..showIndent(1).."return (Just idx)\n"
	result = result.."identWrap :: Program -> String -> IO (Maybe Int)\n"
	result = result.."identWrap typ str = initWrap str >>= identWrapF typ\n" end
	return result
end
function showTypeLua()
	local result = ""
	result = result.."require \"luax\"\n"
	result = result.."--\n"
	result = result..showCallLua().."\n"
	result = result.."function execWrap(arg,fork,exec)\n"
	result = result..showIndent(1).."idx = openFork()\n"
	result = result..showIndent(1).."if (idx < 0) then return -1 end\n"
	result = result..showIndent(1).."if (openCheck(idx) >= 0) then\n"
	result = result..showIndent(1).."arg[\"inp\"]=openRdfd(idx); arg[\"out\"]=openWrfd(idx); arg[\"idx\"]=-1\n"
	result = result..showIndent(1).."if (arg[\"typ\"] == nil) then arg[\"typ\"] = \"Programs\"end\n"
	result = result..showIndent(2).."str = showArgument(arg,\"\")\n"
	result = result..showIndent(2).."openExec(exec,str); io.stderr:write(fork..\": cannot execute file: \"..exec..\"\\n\"); os.exit(-1)\n"
	result = result..showIndent(1).."end\n"
	result = result..showIndent(1).."return idx\n"
	result = result.."end\n"
	result = result.."function typeWrap(typ,fork,exec)\n"
	result = result..showIndent(1).."arg[\"typ\"] = typ\n"
	result = result..showIndent(1).."return execWrap(arg,fork,exec)\n"
	result = result.."end\n"
	result = result.."function initWrap(str)\n"
	result = result..showIndent(1).."arg,len = hideArgument(str,0)\n"
	result = result..showIndent(1).."if (arg == nil) then return nil end\n"
	result = result..showIndent(1).."arg[\"idx\"] = rdwrInit(arg[\"inp\"],arg[\"out\"])\n"
	result = result..showIndent(1).."return arg\n"
	result = result.."end\n"
	result = result.."function identWrap(typ,str)\n"
	result = result..showIndent(1).."arg = initWrap(str)\n"
	result = result..showIndent(1).."if (arg == nil) or not (arg[\"typ\"] == typ) then return -1 end\n"
	result = result..showIndent(1).."return arg[\"idx\"]\n"
	result = result.."end"
	return result
end
args = nil
if (arg[2] ~= nil) then
	args = {}
	for line in io.lines(arg[2]) do
		local deps = line
		while (1) do
			local word,rest = string.match(deps," *([%w]+)(.*)")
			if word == nil then break end
			if string.match(word,"..*Type") then args = nil; break end
			if string.match(word,"..*Field") then args = nil; break end
			if string.match(word,"..*Subtype") then args = nil; break end
			if string.match(word,"..*Union") then args = nil; break end
			args[word] = true
			deps = rest
		end
	end
end
base,ext = string.match(arg[1],"([%w.]*)(%.[%w]*)")
file = io.open(base..ext, "w")
if (base and ext and ext == ".h") then
	file:write(showTypeH().."\n")
end
if (base and ext and ext == ".c") then
	file:write(showTypeC(args).."\n")
end
if (base and ext and ext == ".hs") then
	file:write(showTypeHs(args).."\n")
end
if (base and ext and ext == ".lua") then
	file:write(showTypeLua().."\n")
end
file:close()
