
Add plane.c, add argument backdoor, and move random test to planer.lua.

Change to pair of tetrahedrons. Add depth buffering, object subject plane matrices, and translation mode. Randomly switch between matrices and modes.

Add space.hs classify and qualify.

Add file process and planer.— to classify and qualify randomly discovered tetrahedron overlaps.

Note multiple instances of planer.lua may be run in parallel on the same planer.— to discover and improve faster. Add recurse argument to planer.lua to start that many copies of itself. Add verbose argument that switches between display of all, per interval, improved, or original.

Bring build up on single-board starting with x11 and finishing with startx ~/plane — planer.lua that continuously tweaks a tetrahedron overlap, reads planer.— for known classification counts and metrics, writes to planer.—, classification counts incremented by interval of equivalents, and sample numerics if interval of equivalents has metric improvement. Add instructions and video to the readme.

Try front door through plane.lua.

Add plane.—, space.hs sample additive subtractive refine modes.

Write space.lua that finds and prettifies spaces and tetrahedron overlaps.

Write line.lua to play sounds that interact with polytopes.

Write point.lua that opens tcl/tk gui's for pipes between processes, configuration file changes, audio visual formats.

Add facet decoration and path permission. Let tetrahedron overlaps be entry points.